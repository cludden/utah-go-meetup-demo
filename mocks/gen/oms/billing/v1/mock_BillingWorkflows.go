// Code generated by mockery v2.49.1. DO NOT EDIT.

package billingv1mocks

import (
	billingv1 "github.com/temporalio/reference-app-orders-go/gen/oms/billing/v1"
	internal "go.temporal.io/sdk/workflow"

	mock "github.com/stretchr/testify/mock"
)

// MockBillingWorkflows is an autogenerated mock type for the BillingWorkflows type
type MockBillingWorkflows struct {
	mock.Mock
}

type MockBillingWorkflows_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillingWorkflows) EXPECT() *MockBillingWorkflows_Expecter {
	return &MockBillingWorkflows_Expecter{mock: &_m.Mock}
}

// Charge provides a mock function with given fields: ctx, input
func (_m *MockBillingWorkflows) Charge(ctx internal.Context, input *billingv1.ChargeWorkflowInput) (billingv1.ChargeWorkflow, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Charge")
	}

	var r0 billingv1.ChargeWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.Context, *billingv1.ChargeWorkflowInput) (billingv1.ChargeWorkflow, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(internal.Context, *billingv1.ChargeWorkflowInput) billingv1.ChargeWorkflow); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billingv1.ChargeWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.Context, *billingv1.ChargeWorkflowInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingWorkflows_Charge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Charge'
type MockBillingWorkflows_Charge_Call struct {
	*mock.Call
}

// Charge is a helper method to define mock.On call
//   - ctx internal.Context
//   - input *billingv1.ChargeWorkflowInput
func (_e *MockBillingWorkflows_Expecter) Charge(ctx interface{}, input interface{}) *MockBillingWorkflows_Charge_Call {
	return &MockBillingWorkflows_Charge_Call{Call: _e.mock.On("Charge", ctx, input)}
}

func (_c *MockBillingWorkflows_Charge_Call) Run(run func(ctx internal.Context, input *billingv1.ChargeWorkflowInput)) *MockBillingWorkflows_Charge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.Context), args[1].(*billingv1.ChargeWorkflowInput))
	})
	return _c
}

func (_c *MockBillingWorkflows_Charge_Call) Return(_a0 billingv1.ChargeWorkflow, _a1 error) *MockBillingWorkflows_Charge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillingWorkflows_Charge_Call) RunAndReturn(run func(internal.Context, *billingv1.ChargeWorkflowInput) (billingv1.ChargeWorkflow, error)) *MockBillingWorkflows_Charge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillingWorkflows creates a new instance of MockBillingWorkflows. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillingWorkflows(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillingWorkflows {
	mock := &MockBillingWorkflows{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
