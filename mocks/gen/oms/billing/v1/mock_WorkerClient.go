// Code generated by mockery v2.49.1. DO NOT EDIT.

package billingv1mocks

import (
	context "context"

	billingv1 "github.com/temporalio/reference-app-orders-go/gen/oms/billing/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockWorkerClient is an autogenerated mock type for the WorkerClient type
type MockWorkerClient struct {
	mock.Mock
}

type MockWorkerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkerClient) EXPECT() *MockWorkerClient_Expecter {
	return &MockWorkerClient_Expecter{mock: &_m.Mock}
}

// CancelWorkflow provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockWorkerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	ret := _m.Called(ctx, workflowID, runID)

	if len(ret) == 0 {
		panic("no return value specified for CancelWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkerClient_CancelWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelWorkflow'
type MockWorkerClient_CancelWorkflow_Call struct {
	*mock.Call
}

// CancelWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockWorkerClient_Expecter) CancelWorkflow(ctx interface{}, workflowID interface{}, runID interface{}) *MockWorkerClient_CancelWorkflow_Call {
	return &MockWorkerClient_CancelWorkflow_Call{Call: _e.mock.On("CancelWorkflow", ctx, workflowID, runID)}
}

func (_c *MockWorkerClient_CancelWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockWorkerClient_CancelWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockWorkerClient_CancelWorkflow_Call) Return(_a0 error) *MockWorkerClient_CancelWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkerClient_CancelWorkflow_Call) RunAndReturn(run func(context.Context, string, string) error) *MockWorkerClient_CancelWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// Charge provides a mock function with given fields: ctx, req, opts
func (_m *MockWorkerClient) Charge(ctx context.Context, req *billingv1.ChargeInput, opts ...*billingv1.ChargeOptions) (*billingv1.ChargeResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Charge")
	}

	var r0 *billingv1.ChargeResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) (*billingv1.ChargeResult, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) *billingv1.ChargeResult); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingv1.ChargeResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkerClient_Charge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Charge'
type MockWorkerClient_Charge_Call struct {
	*mock.Call
}

// Charge is a helper method to define mock.On call
//   - ctx context.Context
//   - req *billingv1.ChargeInput
//   - opts ...*billingv1.ChargeOptions
func (_e *MockWorkerClient_Expecter) Charge(ctx interface{}, req interface{}, opts ...interface{}) *MockWorkerClient_Charge_Call {
	return &MockWorkerClient_Charge_Call{Call: _e.mock.On("Charge",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockWorkerClient_Charge_Call) Run(run func(ctx context.Context, req *billingv1.ChargeInput, opts ...*billingv1.ChargeOptions)) *MockWorkerClient_Charge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*billingv1.ChargeOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*billingv1.ChargeOptions)
			}
		}
		run(args[0].(context.Context), args[1].(*billingv1.ChargeInput), variadicArgs...)
	})
	return _c
}

func (_c *MockWorkerClient_Charge_Call) Return(_a0 *billingv1.ChargeResult, _a1 error) *MockWorkerClient_Charge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkerClient_Charge_Call) RunAndReturn(run func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) (*billingv1.ChargeResult, error)) *MockWorkerClient_Charge_Call {
	_c.Call.Return(run)
	return _c
}

// ChargeAsync provides a mock function with given fields: ctx, req, opts
func (_m *MockWorkerClient) ChargeAsync(ctx context.Context, req *billingv1.ChargeInput, opts ...*billingv1.ChargeOptions) (billingv1.ChargeRun, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChargeAsync")
	}

	var r0 billingv1.ChargeRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) (billingv1.ChargeRun, error)); ok {
		return rf(ctx, req, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) billingv1.ChargeRun); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billingv1.ChargeRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkerClient_ChargeAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChargeAsync'
type MockWorkerClient_ChargeAsync_Call struct {
	*mock.Call
}

// ChargeAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - req *billingv1.ChargeInput
//   - opts ...*billingv1.ChargeOptions
func (_e *MockWorkerClient_Expecter) ChargeAsync(ctx interface{}, req interface{}, opts ...interface{}) *MockWorkerClient_ChargeAsync_Call {
	return &MockWorkerClient_ChargeAsync_Call{Call: _e.mock.On("ChargeAsync",
		append([]interface{}{ctx, req}, opts...)...)}
}

func (_c *MockWorkerClient_ChargeAsync_Call) Run(run func(ctx context.Context, req *billingv1.ChargeInput, opts ...*billingv1.ChargeOptions)) *MockWorkerClient_ChargeAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*billingv1.ChargeOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*billingv1.ChargeOptions)
			}
		}
		run(args[0].(context.Context), args[1].(*billingv1.ChargeInput), variadicArgs...)
	})
	return _c
}

func (_c *MockWorkerClient_ChargeAsync_Call) Return(_a0 billingv1.ChargeRun, _a1 error) *MockWorkerClient_ChargeAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkerClient_ChargeAsync_Call) RunAndReturn(run func(context.Context, *billingv1.ChargeInput, ...*billingv1.ChargeOptions) (billingv1.ChargeRun, error)) *MockWorkerClient_ChargeAsync_Call {
	_c.Call.Return(run)
	return _c
}

// GetCharge provides a mock function with given fields: ctx, workflowID, runID
func (_m *MockWorkerClient) GetCharge(ctx context.Context, workflowID string, runID string) billingv1.ChargeRun {
	ret := _m.Called(ctx, workflowID, runID)

	if len(ret) == 0 {
		panic("no return value specified for GetCharge")
	}

	var r0 billingv1.ChargeRun
	if rf, ok := ret.Get(0).(func(context.Context, string, string) billingv1.ChargeRun); ok {
		r0 = rf(ctx, workflowID, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billingv1.ChargeRun)
		}
	}

	return r0
}

// MockWorkerClient_GetCharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCharge'
type MockWorkerClient_GetCharge_Call struct {
	*mock.Call
}

// GetCharge is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
func (_e *MockWorkerClient_Expecter) GetCharge(ctx interface{}, workflowID interface{}, runID interface{}) *MockWorkerClient_GetCharge_Call {
	return &MockWorkerClient_GetCharge_Call{Call: _e.mock.On("GetCharge", ctx, workflowID, runID)}
}

func (_c *MockWorkerClient_GetCharge_Call) Run(run func(ctx context.Context, workflowID string, runID string)) *MockWorkerClient_GetCharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockWorkerClient_GetCharge_Call) Return(_a0 billingv1.ChargeRun) *MockWorkerClient_GetCharge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkerClient_GetCharge_Call) RunAndReturn(run func(context.Context, string, string) billingv1.ChargeRun) *MockWorkerClient_GetCharge_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateWorkflow provides a mock function with given fields: ctx, workflowID, runID, reason, details
func (_m *MockWorkerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, workflowID, runID, reason)
	_ca = append(_ca, details...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, ...interface{}) error); ok {
		r0 = rf(ctx, workflowID, runID, reason, details...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkerClient_TerminateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateWorkflow'
type MockWorkerClient_TerminateWorkflow_Call struct {
	*mock.Call
}

// TerminateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
//   - runID string
//   - reason string
//   - details ...interface{}
func (_e *MockWorkerClient_Expecter) TerminateWorkflow(ctx interface{}, workflowID interface{}, runID interface{}, reason interface{}, details ...interface{}) *MockWorkerClient_TerminateWorkflow_Call {
	return &MockWorkerClient_TerminateWorkflow_Call{Call: _e.mock.On("TerminateWorkflow",
		append([]interface{}{ctx, workflowID, runID, reason}, details...)...)}
}

func (_c *MockWorkerClient_TerminateWorkflow_Call) Run(run func(ctx context.Context, workflowID string, runID string, reason string, details ...interface{})) *MockWorkerClient_TerminateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockWorkerClient_TerminateWorkflow_Call) Return(_a0 error) *MockWorkerClient_TerminateWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkerClient_TerminateWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, ...interface{}) error) *MockWorkerClient_TerminateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkerClient creates a new instance of MockWorkerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkerClient {
	mock := &MockWorkerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
