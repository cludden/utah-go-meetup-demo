// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file oms/order/v1/orders.proto (package oms.order.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CustomerAction, Fulfillment, Item, Order, OrderStatus } from "../../v1/types_pb.js";

/**
 * CreateOrderInput describes the input to an CreateOrder workflow
 *
 * @generated from message oms.order.v1.CreateOrderInput
 */
export class CreateOrderInput extends Message<CreateOrderInput> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: repeated oms.v1.Item items = 3;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<CreateOrderInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.CreateOrderInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderInput {
    return new CreateOrderInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderInput {
    return new CreateOrderInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderInput {
    return new CreateOrderInput().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderInput | PlainMessage<CreateOrderInput> | undefined, b: CreateOrderInput | PlainMessage<CreateOrderInput> | undefined): boolean {
    return proto3.util.equals(CreateOrderInput, a, b);
  }
}

/**
 * CreateOrderResult describes the output from an CreateOrder workflow
 *
 * @generated from message oms.order.v1.CreateOrderResult
 */
export class CreateOrderResult extends Message<CreateOrderResult> {
  /**
   * @generated from field: oms.v1.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<CreateOrderResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.CreateOrderResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderResult {
    return new CreateOrderResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderResult {
    return new CreateOrderResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderResult {
    return new CreateOrderResult().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderResult | PlainMessage<CreateOrderResult> | undefined, b: CreateOrderResult | PlainMessage<CreateOrderResult> | undefined): boolean {
    return proto3.util.equals(CreateOrderResult, a, b);
  }
}

/**
 * CustomerActionInput describes the input to a CustomerAction signal
 *
 * @generated from message oms.order.v1.CustomerActionInput
 */
export class CustomerActionInput extends Message<CustomerActionInput> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: oms.v1.CustomerAction action = 2;
   */
  action = CustomerAction.UNSPECIFIED;

  constructor(data?: PartialMessage<CustomerActionInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.CustomerActionInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "action", kind: "enum", T: proto3.getEnumType(CustomerAction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerActionInput {
    return new CustomerActionInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerActionInput {
    return new CustomerActionInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerActionInput {
    return new CustomerActionInput().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerActionInput | PlainMessage<CustomerActionInput> | undefined, b: CustomerActionInput | PlainMessage<CustomerActionInput> | undefined): boolean {
    return proto3.util.equals(CustomerActionInput, a, b);
  }
}

/**
 * GetOrderInput describes the input to a GetOrderStatus query
 *
 * @generated from message oms.order.v1.GetOrderInput
 */
export class GetOrderInput extends Message<GetOrderInput> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetOrderInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.GetOrderInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderInput {
    return new GetOrderInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderInput {
    return new GetOrderInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderInput {
    return new GetOrderInput().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderInput | PlainMessage<GetOrderInput> | undefined, b: GetOrderInput | PlainMessage<GetOrderInput> | undefined): boolean {
    return proto3.util.equals(GetOrderInput, a, b);
  }
}

/**
 * GetOrderResult describes the output from a GetOrderStatus query
 *
 * @generated from message oms.order.v1.GetOrderResult
 */
export class GetOrderResult extends Message<GetOrderResult> {
  /**
   * @generated from field: oms.v1.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<GetOrderResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.GetOrderResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderResult {
    return new GetOrderResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderResult {
    return new GetOrderResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderResult {
    return new GetOrderResult().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderResult | PlainMessage<GetOrderResult> | undefined, b: GetOrderResult | PlainMessage<GetOrderResult> | undefined): boolean {
    return proto3.util.equals(GetOrderResult, a, b);
  }
}

/**
 * ListOrdersResult describes the output from a ListOrders operation
 *
 * @generated from message oms.order.v1.ListOrdersResult
 */
export class ListOrdersResult extends Message<ListOrdersResult> {
  /**
   * @generated from field: repeated oms.v1.Order orders = 1;
   */
  orders: Order[] = [];

  constructor(data?: PartialMessage<ListOrdersResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.ListOrdersResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrdersResult {
    return new ListOrdersResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrdersResult {
    return new ListOrdersResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrdersResult {
    return new ListOrdersResult().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrdersResult | PlainMessage<ListOrdersResult> | undefined, b: ListOrdersResult | PlainMessage<ListOrdersResult> | undefined): boolean {
    return proto3.util.equals(ListOrdersResult, a, b);
  }
}

/**
 * ReserveItemsInput describes the input to a ReserveItems activity
 *
 * @generated from message oms.order.v1.ReserveItemsInput
 */
export class ReserveItemsInput extends Message<ReserveItemsInput> {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  /**
   * @generated from field: string customer_id = 2;
   */
  customerId = "";

  /**
   * @generated from field: repeated oms.v1.Item items = 3;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<ReserveItemsInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.ReserveItemsInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReserveItemsInput {
    return new ReserveItemsInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReserveItemsInput {
    return new ReserveItemsInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReserveItemsInput {
    return new ReserveItemsInput().fromJsonString(jsonString, options);
  }

  static equals(a: ReserveItemsInput | PlainMessage<ReserveItemsInput> | undefined, b: ReserveItemsInput | PlainMessage<ReserveItemsInput> | undefined): boolean {
    return proto3.util.equals(ReserveItemsInput, a, b);
  }
}

/**
 * ReserveItemsResult describes the output from a ReserveItems activity
 *
 * @generated from message oms.order.v1.ReserveItemsResult
 */
export class ReserveItemsResult extends Message<ReserveItemsResult> {
  /**
   * @generated from field: repeated oms.v1.Fulfillment fulfillments = 1;
   */
  fulfillments: Fulfillment[] = [];

  constructor(data?: PartialMessage<ReserveItemsResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.ReserveItemsResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fulfillments", kind: "message", T: Fulfillment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReserveItemsResult {
    return new ReserveItemsResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReserveItemsResult {
    return new ReserveItemsResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReserveItemsResult {
    return new ReserveItemsResult().fromJsonString(jsonString, options);
  }

  static equals(a: ReserveItemsResult | PlainMessage<ReserveItemsResult> | undefined, b: ReserveItemsResult | PlainMessage<ReserveItemsResult> | undefined): boolean {
    return proto3.util.equals(ReserveItemsResult, a, b);
  }
}

/**
 * UpdateOrderStatusInput describes the input to an UpdateOrderStatus activity
 *
 * @generated from message oms.order.v1.UpdateOrderStatusInput
 */
export class UpdateOrderStatusInput extends Message<UpdateOrderStatusInput> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: oms.v1.OrderStatus status = 2;
   */
  status = OrderStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateOrderStatusInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.order.v1.UpdateOrderStatusInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(OrderStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrderStatusInput {
    return new UpdateOrderStatusInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrderStatusInput {
    return new UpdateOrderStatusInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrderStatusInput {
    return new UpdateOrderStatusInput().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrderStatusInput | PlainMessage<UpdateOrderStatusInput> | undefined, b: UpdateOrderStatusInput | PlainMessage<UpdateOrderStatusInput> | undefined): boolean {
    return proto3.util.equals(UpdateOrderStatusInput, a, b);
  }
}

