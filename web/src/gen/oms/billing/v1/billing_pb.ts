// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file oms/billing/v1/billing.proto (package oms.billing.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Item } from "../../v1/types_pb.js";

/**
 * ChargeInput is the input for the Charge workflow.
 *
 * @generated from message oms.billing.v1.ChargeInput
 */
export class ChargeInput extends Message<ChargeInput> {
  /**
   * @generated from field: string customer_id = 1;
   */
  customerId = "";

  /**
   * @generated from field: string order_id = 5;
   */
  orderId = "";

  /**
   * @generated from field: string fulfillment_id = 6;
   */
  fulfillmentId = "";

  /**
   * @generated from field: string reference = 2;
   */
  reference = "";

  /**
   * @generated from field: repeated oms.v1.Item items = 3;
   */
  items: Item[] = [];

  /**
   * @generated from field: string idempotency_key = 4;
   */
  idempotencyKey = "";

  constructor(data?: PartialMessage<ChargeInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.ChargeInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "fulfillment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "items", kind: "message", T: Item, repeated: true },
    { no: 4, name: "idempotency_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChargeInput {
    return new ChargeInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChargeInput {
    return new ChargeInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChargeInput {
    return new ChargeInput().fromJsonString(jsonString, options);
  }

  static equals(a: ChargeInput | PlainMessage<ChargeInput> | undefined, b: ChargeInput | PlainMessage<ChargeInput> | undefined): boolean {
    return proto3.util.equals(ChargeInput, a, b);
  }
}

/**
 * ChargeResult is the result for the Charge workflow.
 *
 * @generated from message oms.billing.v1.ChargeResult
 */
export class ChargeResult extends Message<ChargeResult> {
  /**
   * @generated from field: string invoice_reference = 1;
   */
  invoiceReference = "";

  /**
   * @generated from field: int32 sub_total = 2;
   */
  subTotal = 0;

  /**
   * @generated from field: int32 shipping = 3;
   */
  shipping = 0;

  /**
   * @generated from field: int32 tax = 4;
   */
  tax = 0;

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  /**
   * @generated from field: bool success = 6;
   */
  success = false;

  /**
   * @generated from field: string auth_code = 7;
   */
  authCode = "";

  constructor(data?: PartialMessage<ChargeResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.ChargeResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invoice_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "shipping", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "tax", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "auth_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChargeResult {
    return new ChargeResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChargeResult {
    return new ChargeResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChargeResult {
    return new ChargeResult().fromJsonString(jsonString, options);
  }

  static equals(a: ChargeResult | PlainMessage<ChargeResult> | undefined, b: ChargeResult | PlainMessage<ChargeResult> | undefined): boolean {
    return proto3.util.equals(ChargeResult, a, b);
  }
}

/**
 * CheckFraudInput describes the input to a CheckFraud activity
 *
 * @generated from message oms.billing.v1.CheckFraudInput
 */
export class CheckFraudInput extends Message<CheckFraudInput> {
  /**
   * @generated from field: string customer_id = 1;
   */
  customerId = "";

  /**
   * @generated from field: int32 charge = 2;
   */
  charge = 0;

  constructor(data?: PartialMessage<CheckFraudInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.CheckFraudInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "charge", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckFraudInput {
    return new CheckFraudInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckFraudInput {
    return new CheckFraudInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckFraudInput {
    return new CheckFraudInput().fromJsonString(jsonString, options);
  }

  static equals(a: CheckFraudInput | PlainMessage<CheckFraudInput> | undefined, b: CheckFraudInput | PlainMessage<CheckFraudInput> | undefined): boolean {
    return proto3.util.equals(CheckFraudInput, a, b);
  }
}

/**
 * CheckFraudResult describes the output from a CheckFraud activity
 *
 * @generated from message oms.billing.v1.CheckFraudResult
 */
export class CheckFraudResult extends Message<CheckFraudResult> {
  /**
   * @generated from field: bool declined = 1;
   */
  declined = false;

  constructor(data?: PartialMessage<CheckFraudResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.CheckFraudResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "declined", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckFraudResult {
    return new CheckFraudResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckFraudResult {
    return new CheckFraudResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckFraudResult {
    return new CheckFraudResult().fromJsonString(jsonString, options);
  }

  static equals(a: CheckFraudResult | PlainMessage<CheckFraudResult> | undefined, b: CheckFraudResult | PlainMessage<CheckFraudResult> | undefined): boolean {
    return proto3.util.equals(CheckFraudResult, a, b);
  }
}

/**
 * GenerateInvoiceInput describes the input to a GenerateInvoice activity
 *
 * @generated from message oms.billing.v1.GenerateInvoiceInput
 */
export class GenerateInvoiceInput extends Message<GenerateInvoiceInput> {
  /**
   * @generated from field: string customer_id = 1;
   */
  customerId = "";

  /**
   * @generated from field: string reference = 2;
   */
  reference = "";

  /**
   * @generated from field: repeated oms.v1.Item items = 3;
   */
  items: Item[] = [];

  constructor(data?: PartialMessage<GenerateInvoiceInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.GenerateInvoiceInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "items", kind: "message", T: Item, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateInvoiceInput {
    return new GenerateInvoiceInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateInvoiceInput {
    return new GenerateInvoiceInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateInvoiceInput {
    return new GenerateInvoiceInput().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateInvoiceInput | PlainMessage<GenerateInvoiceInput> | undefined, b: GenerateInvoiceInput | PlainMessage<GenerateInvoiceInput> | undefined): boolean {
    return proto3.util.equals(GenerateInvoiceInput, a, b);
  }
}

/**
 * GenerateInvoiceResult describes the output from a GenerateInvoice activity
 *
 * @generated from message oms.billing.v1.GenerateInvoiceResult
 */
export class GenerateInvoiceResult extends Message<GenerateInvoiceResult> {
  /**
   * @generated from field: string invoice_reference = 1;
   */
  invoiceReference = "";

  /**
   * @generated from field: int32 sub_total = 2;
   */
  subTotal = 0;

  /**
   * @generated from field: int32 shipping = 3;
   */
  shipping = 0;

  /**
   * @generated from field: int32 tax = 4;
   */
  tax = 0;

  /**
   * @generated from field: int32 total = 5;
   */
  total = 0;

  constructor(data?: PartialMessage<GenerateInvoiceResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.GenerateInvoiceResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invoice_reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sub_total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "shipping", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "tax", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateInvoiceResult {
    return new GenerateInvoiceResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateInvoiceResult {
    return new GenerateInvoiceResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateInvoiceResult {
    return new GenerateInvoiceResult().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateInvoiceResult | PlainMessage<GenerateInvoiceResult> | undefined, b: GenerateInvoiceResult | PlainMessage<GenerateInvoiceResult> | undefined): boolean {
    return proto3.util.equals(GenerateInvoiceResult, a, b);
  }
}

/**
 * ProcessPaymentInput describes the input to a ProcessPayment activity
 *
 * @generated from message oms.billing.v1.ProcessPaymentInput
 */
export class ProcessPaymentInput extends Message<ProcessPaymentInput> {
  /**
   * @generated from field: string customer_id = 1;
   */
  customerId = "";

  /**
   * @generated from field: string reference = 2;
   */
  reference = "";

  /**
   * @generated from field: int32 charge = 3;
   */
  charge = 0;

  constructor(data?: PartialMessage<ProcessPaymentInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.ProcessPaymentInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "charge", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessPaymentInput {
    return new ProcessPaymentInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessPaymentInput {
    return new ProcessPaymentInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessPaymentInput {
    return new ProcessPaymentInput().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessPaymentInput | PlainMessage<ProcessPaymentInput> | undefined, b: ProcessPaymentInput | PlainMessage<ProcessPaymentInput> | undefined): boolean {
    return proto3.util.equals(ProcessPaymentInput, a, b);
  }
}

/**
 * ProcessPaymentResult describes the output from a ProcessPayment activity
 *
 * @generated from message oms.billing.v1.ProcessPaymentResult
 */
export class ProcessPaymentResult extends Message<ProcessPaymentResult> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string auth_code = 2;
   */
  authCode = "";

  constructor(data?: PartialMessage<ProcessPaymentResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "oms.billing.v1.ProcessPaymentResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "auth_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessPaymentResult {
    return new ProcessPaymentResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessPaymentResult {
    return new ProcessPaymentResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessPaymentResult {
    return new ProcessPaymentResult().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessPaymentResult | PlainMessage<ProcessPaymentResult> | undefined, b: ProcessPaymentResult | PlainMessage<ProcessPaymentResult> | undefined): boolean {
    return proto3.util.equals(ProcessPaymentResult, a, b);
  }
}

