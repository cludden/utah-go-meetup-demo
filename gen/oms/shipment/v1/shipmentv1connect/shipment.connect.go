// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: oms/shipment/v1/shipment.proto

package shipmentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/temporalio/reference-app-orders-go/gen/oms/shipment/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiName is the fully-qualified name of the Api service.
	ApiName = "oms.shipment.v1.Api"
	// WorkerName is the fully-qualified name of the Worker service.
	WorkerName = "oms.shipment.v1.Worker"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiGetShipmentProcedure is the fully-qualified name of the Api's GetShipment RPC.
	ApiGetShipmentProcedure = "/oms.shipment.v1.Api/GetShipment"
	// ApiListShipmentsProcedure is the fully-qualified name of the Api's ListShipments RPC.
	ApiListShipmentsProcedure = "/oms.shipment.v1.Api/ListShipments"
	// ApiUpdateShipmentStatusProcedure is the fully-qualified name of the Api's UpdateShipmentStatus
	// RPC.
	ApiUpdateShipmentStatusProcedure = "/oms.shipment.v1.Api/UpdateShipmentStatus"
	// WorkerCreateShipmentProcedure is the fully-qualified name of the Worker's CreateShipment RPC.
	WorkerCreateShipmentProcedure = "/oms.shipment.v1.Worker/CreateShipment"
	// WorkerShipmentProcedure is the fully-qualified name of the Worker's Shipment RPC.
	WorkerShipmentProcedure = "/oms.shipment.v1.Worker/Shipment"
	// WorkerShipmentStatusUpdatedProcedure is the fully-qualified name of the Worker's
	// ShipmentStatusUpdated RPC.
	WorkerShipmentStatusUpdatedProcedure = "/oms.shipment.v1.Worker/ShipmentStatusUpdated"
	// WorkerGetStatusProcedure is the fully-qualified name of the Worker's GetStatus RPC.
	WorkerGetStatusProcedure = "/oms.shipment.v1.Worker/GetStatus"
	// WorkerUpdateShipmentStatusProcedure is the fully-qualified name of the Worker's
	// UpdateShipmentStatus RPC.
	WorkerUpdateShipmentStatusProcedure = "/oms.shipment.v1.Worker/UpdateShipmentStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	apiServiceDescriptor                        = v1.File_oms_shipment_v1_shipment_proto.Services().ByName("Api")
	apiGetShipmentMethodDescriptor              = apiServiceDescriptor.Methods().ByName("GetShipment")
	apiListShipmentsMethodDescriptor            = apiServiceDescriptor.Methods().ByName("ListShipments")
	apiUpdateShipmentStatusMethodDescriptor     = apiServiceDescriptor.Methods().ByName("UpdateShipmentStatus")
	workerServiceDescriptor                     = v1.File_oms_shipment_v1_shipment_proto.Services().ByName("Worker")
	workerCreateShipmentMethodDescriptor        = workerServiceDescriptor.Methods().ByName("CreateShipment")
	workerShipmentMethodDescriptor              = workerServiceDescriptor.Methods().ByName("Shipment")
	workerShipmentStatusUpdatedMethodDescriptor = workerServiceDescriptor.Methods().ByName("ShipmentStatusUpdated")
	workerGetStatusMethodDescriptor             = workerServiceDescriptor.Methods().ByName("GetStatus")
	workerUpdateShipmentStatusMethodDescriptor  = workerServiceDescriptor.Methods().ByName("UpdateShipmentStatus")
)

// ApiClient is a client for the oms.shipment.v1.Api service.
type ApiClient interface {
	// returns information about an existing shipment
	GetShipment(context.Context, *connect.Request[v1.GetShipmentInput]) (*connect.Response[v1.GetShipmentResult], error)
	// returns a list of existing shipments
	ListShipments(context.Context, *connect.Request[v1.ListShipmentsInput]) (*connect.Response[v1.ListShipmentsResult], error)
	// processes a carrier update
	UpdateShipmentStatus(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error)
}

// NewApiClient constructs a client for the oms.shipment.v1.Api service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &apiClient{
		getShipment: connect.NewClient[v1.GetShipmentInput, v1.GetShipmentResult](
			httpClient,
			baseURL+ApiGetShipmentProcedure,
			connect.WithSchema(apiGetShipmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listShipments: connect.NewClient[v1.ListShipmentsInput, v1.ListShipmentsResult](
			httpClient,
			baseURL+ApiListShipmentsProcedure,
			connect.WithSchema(apiListShipmentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateShipmentStatus: connect.NewClient[v1.UpdateShipmentStatusInput, emptypb.Empty](
			httpClient,
			baseURL+ApiUpdateShipmentStatusProcedure,
			connect.WithSchema(apiUpdateShipmentStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiClient implements ApiClient.
type apiClient struct {
	getShipment          *connect.Client[v1.GetShipmentInput, v1.GetShipmentResult]
	listShipments        *connect.Client[v1.ListShipmentsInput, v1.ListShipmentsResult]
	updateShipmentStatus *connect.Client[v1.UpdateShipmentStatusInput, emptypb.Empty]
}

// GetShipment calls oms.shipment.v1.Api.GetShipment.
func (c *apiClient) GetShipment(ctx context.Context, req *connect.Request[v1.GetShipmentInput]) (*connect.Response[v1.GetShipmentResult], error) {
	return c.getShipment.CallUnary(ctx, req)
}

// ListShipments calls oms.shipment.v1.Api.ListShipments.
func (c *apiClient) ListShipments(ctx context.Context, req *connect.Request[v1.ListShipmentsInput]) (*connect.Response[v1.ListShipmentsResult], error) {
	return c.listShipments.CallUnary(ctx, req)
}

// UpdateShipmentStatus calls oms.shipment.v1.Api.UpdateShipmentStatus.
func (c *apiClient) UpdateShipmentStatus(ctx context.Context, req *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error) {
	return c.updateShipmentStatus.CallUnary(ctx, req)
}

// ApiHandler is an implementation of the oms.shipment.v1.Api service.
type ApiHandler interface {
	// returns information about an existing shipment
	GetShipment(context.Context, *connect.Request[v1.GetShipmentInput]) (*connect.Response[v1.GetShipmentResult], error)
	// returns a list of existing shipments
	ListShipments(context.Context, *connect.Request[v1.ListShipmentsInput]) (*connect.Response[v1.ListShipmentsResult], error)
	// processes a carrier update
	UpdateShipmentStatus(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error)
}

// NewApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiHandler(svc ApiHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiGetShipmentHandler := connect.NewUnaryHandler(
		ApiGetShipmentProcedure,
		svc.GetShipment,
		connect.WithSchema(apiGetShipmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiListShipmentsHandler := connect.NewUnaryHandler(
		ApiListShipmentsProcedure,
		svc.ListShipments,
		connect.WithSchema(apiListShipmentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	apiUpdateShipmentStatusHandler := connect.NewUnaryHandler(
		ApiUpdateShipmentStatusProcedure,
		svc.UpdateShipmentStatus,
		connect.WithSchema(apiUpdateShipmentStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/oms.shipment.v1.Api/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiGetShipmentProcedure:
			apiGetShipmentHandler.ServeHTTP(w, r)
		case ApiListShipmentsProcedure:
			apiListShipmentsHandler.ServeHTTP(w, r)
		case ApiUpdateShipmentStatusProcedure:
			apiUpdateShipmentStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiHandler returns CodeUnimplemented from all methods.
type UnimplementedApiHandler struct{}

func (UnimplementedApiHandler) GetShipment(context.Context, *connect.Request[v1.GetShipmentInput]) (*connect.Response[v1.GetShipmentResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Api.GetShipment is not implemented"))
}

func (UnimplementedApiHandler) ListShipments(context.Context, *connect.Request[v1.ListShipmentsInput]) (*connect.Response[v1.ListShipmentsResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Api.ListShipments is not implemented"))
}

func (UnimplementedApiHandler) UpdateShipmentStatus(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Api.UpdateShipmentStatus is not implemented"))
}

// WorkerClient is a client for the oms.shipment.v1.Worker service.
type WorkerClient interface {
	// books shipment with carrier and persists record to database
	CreateShipment(context.Context, *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error)
	// process a shipment
	Shipment(context.Context, *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error)
	// notify the requestor of an update to a shipment's status.
	ShipmentStatusUpdated(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error)
	// get shipment status
	GetStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetShipmentResult], error)
	// process shiptment status update from carrier
	UpdateShipmentStatus(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error)
}

// NewWorkerClient constructs a client for the oms.shipment.v1.Worker service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workerClient{
		createShipment: connect.NewClient[v1.CreateShipmentInput, v1.CreateShipmentResult](
			httpClient,
			baseURL+WorkerCreateShipmentProcedure,
			connect.WithSchema(workerCreateShipmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		shipment: connect.NewClient[v1.CreateShipmentInput, v1.CreateShipmentResult](
			httpClient,
			baseURL+WorkerShipmentProcedure,
			connect.WithSchema(workerShipmentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		shipmentStatusUpdated: connect.NewClient[v1.UpdateShipmentStatusInput, emptypb.Empty](
			httpClient,
			baseURL+WorkerShipmentStatusUpdatedProcedure,
			connect.WithSchema(workerShipmentStatusUpdatedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[emptypb.Empty, v1.GetShipmentResult](
			httpClient,
			baseURL+WorkerGetStatusProcedure,
			connect.WithSchema(workerGetStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateShipmentStatus: connect.NewClient[v1.UpdateShipmentStatusInput, emptypb.Empty](
			httpClient,
			baseURL+WorkerUpdateShipmentStatusProcedure,
			connect.WithSchema(workerUpdateShipmentStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// workerClient implements WorkerClient.
type workerClient struct {
	createShipment        *connect.Client[v1.CreateShipmentInput, v1.CreateShipmentResult]
	shipment              *connect.Client[v1.CreateShipmentInput, v1.CreateShipmentResult]
	shipmentStatusUpdated *connect.Client[v1.UpdateShipmentStatusInput, emptypb.Empty]
	getStatus             *connect.Client[emptypb.Empty, v1.GetShipmentResult]
	updateShipmentStatus  *connect.Client[v1.UpdateShipmentStatusInput, emptypb.Empty]
}

// CreateShipment calls oms.shipment.v1.Worker.CreateShipment.
func (c *workerClient) CreateShipment(ctx context.Context, req *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error) {
	return c.createShipment.CallUnary(ctx, req)
}

// Shipment calls oms.shipment.v1.Worker.Shipment.
func (c *workerClient) Shipment(ctx context.Context, req *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error) {
	return c.shipment.CallUnary(ctx, req)
}

// ShipmentStatusUpdated calls oms.shipment.v1.Worker.ShipmentStatusUpdated.
func (c *workerClient) ShipmentStatusUpdated(ctx context.Context, req *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error) {
	return c.shipmentStatusUpdated.CallUnary(ctx, req)
}

// GetStatus calls oms.shipment.v1.Worker.GetStatus.
func (c *workerClient) GetStatus(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetShipmentResult], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// UpdateShipmentStatus calls oms.shipment.v1.Worker.UpdateShipmentStatus.
func (c *workerClient) UpdateShipmentStatus(ctx context.Context, req *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error) {
	return c.updateShipmentStatus.CallUnary(ctx, req)
}

// WorkerHandler is an implementation of the oms.shipment.v1.Worker service.
type WorkerHandler interface {
	// books shipment with carrier and persists record to database
	CreateShipment(context.Context, *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error)
	// process a shipment
	Shipment(context.Context, *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error)
	// notify the requestor of an update to a shipment's status.
	ShipmentStatusUpdated(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error)
	// get shipment status
	GetStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetShipmentResult], error)
	// process shiptment status update from carrier
	UpdateShipmentStatus(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error)
}

// NewWorkerHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkerHandler(svc WorkerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workerCreateShipmentHandler := connect.NewUnaryHandler(
		WorkerCreateShipmentProcedure,
		svc.CreateShipment,
		connect.WithSchema(workerCreateShipmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workerShipmentHandler := connect.NewUnaryHandler(
		WorkerShipmentProcedure,
		svc.Shipment,
		connect.WithSchema(workerShipmentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workerShipmentStatusUpdatedHandler := connect.NewUnaryHandler(
		WorkerShipmentStatusUpdatedProcedure,
		svc.ShipmentStatusUpdated,
		connect.WithSchema(workerShipmentStatusUpdatedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workerGetStatusHandler := connect.NewUnaryHandler(
		WorkerGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(workerGetStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workerUpdateShipmentStatusHandler := connect.NewUnaryHandler(
		WorkerUpdateShipmentStatusProcedure,
		svc.UpdateShipmentStatus,
		connect.WithSchema(workerUpdateShipmentStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/oms.shipment.v1.Worker/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkerCreateShipmentProcedure:
			workerCreateShipmentHandler.ServeHTTP(w, r)
		case WorkerShipmentProcedure:
			workerShipmentHandler.ServeHTTP(w, r)
		case WorkerShipmentStatusUpdatedProcedure:
			workerShipmentStatusUpdatedHandler.ServeHTTP(w, r)
		case WorkerGetStatusProcedure:
			workerGetStatusHandler.ServeHTTP(w, r)
		case WorkerUpdateShipmentStatusProcedure:
			workerUpdateShipmentStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkerHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkerHandler struct{}

func (UnimplementedWorkerHandler) CreateShipment(context.Context, *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Worker.CreateShipment is not implemented"))
}

func (UnimplementedWorkerHandler) Shipment(context.Context, *connect.Request[v1.CreateShipmentInput]) (*connect.Response[v1.CreateShipmentResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Worker.Shipment is not implemented"))
}

func (UnimplementedWorkerHandler) ShipmentStatusUpdated(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Worker.ShipmentStatusUpdated is not implemented"))
}

func (UnimplementedWorkerHandler) GetStatus(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetShipmentResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Worker.GetStatus is not implemented"))
}

func (UnimplementedWorkerHandler) UpdateShipmentStatus(context.Context, *connect.Request[v1.UpdateShipmentStatusInput]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("oms.shipment.v1.Worker.UpdateShipmentStatus is not implemented"))
}
