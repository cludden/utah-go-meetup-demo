// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal 1.14.3 (d2f9bfc0a16171313109a7b80bc10fabc41196e0)
//	go go1.21.12
//	protoc (unknown)
//
// source: oms/shipment/v1/shipment.proto
package shipmentv1

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	helpers "github.com/cludden/protoc-gen-go-temporal/pkg/helpers"
	scheme "github.com/cludden/protoc-gen-go-temporal/pkg/scheme"
	testutil "github.com/cludden/protoc-gen-go-temporal/pkg/testutil"
	gohomedir "github.com/mitchellh/go-homedir"
	v1 "github.com/temporalio/reference-app-orders-go/gen/oms/v1"
	v2 "github.com/urfave/cli/v2"
	enumsv1 "go.temporal.io/api/enums/v1"
	serviceerror "go.temporal.io/api/serviceerror"
	activity "go.temporal.io/sdk/activity"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	testsuite "go.temporal.io/sdk/testsuite"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	protojson "google.golang.org/protobuf/encoding/protojson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	"log/slog"
	"os"
	"sort"
	"strings"
	"time"
)

// WorkerTaskQueue is the default task-queue for a oms.shipment.v1.Worker worker
const WorkerTaskQueue = "shipment-v1"

// oms.shipment.v1.Worker workflow names
const (
	ShipmentWorkflowName = "shipment.v1.Shipment"
)

// oms.shipment.v1.Worker workflow id expressions
var (
	ShipmentIdexpression = expression.MustParseExpression("Shipment:${! id.or(throw(\"id required\")) }")
)

// oms.shipment.v1.Worker workflow search attribute mappings
var (
	ShipmentSearchAttributesMapping = expression.MustParseMapping("CustomerId = customerId \nFulfillmentId = fulfillmentId \nOrderId = orderId \n")
)

// oms.shipment.v1.Worker activity names
const (
	CreateShipmentActivityName       = "oms.shipment.v1.Worker.CreateShipment"
	UpdateShipmentStatusActivityName = "oms.shipment.v1.Worker.UpdateShipmentStatus"
)

// oms.shipment.v1.Worker query names
const (
	GetStatusQueryName = "shipment.v1.Status"
)

// oms.shipment.v1.Worker signal names
const (
	ShipmentStatusUpdatedSignalName = "shipment.v1.ShipmentStatusUpdated"
)

// oms.shipment.v1.Worker update names
const (
	UpdateShipmentStatusUpdateName = "shipment.v1.UpdateShipmentStatus"
)

// WorkerClient describes a client for a(n) oms.shipment.v1.Worker worker
type WorkerClient interface {
	// process a shipment
	Shipment(ctx context.Context, req *CreateShipmentInput, opts ...*ShipmentOptions) (*CreateShipmentResult, error)

	// ShipmentAsync starts a(n) shipment.v1.Shipment workflow and returns a handle to the workflow run
	ShipmentAsync(ctx context.Context, req *CreateShipmentInput, opts ...*ShipmentOptions) (ShipmentRun, error)

	// GetShipment retrieves a handle to an existing shipment.v1.Shipment workflow execution
	GetShipment(ctx context.Context, workflowID string, runID string) ShipmentRun

	// CancelWorkflow requests cancellation of an existing workflow execution
	CancelWorkflow(ctx context.Context, workflowID string, runID string) error

	// TerminateWorkflow an existing workflow execution
	TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error

	// get shipment status
	GetStatus(ctx context.Context, workflowID string, runID string) (*GetShipmentResult, error)

	// notify the requestor of an update to a shipment's status.
	ShipmentStatusUpdated(ctx context.Context, workflowID string, runID string, signal *UpdateShipmentStatusInput) error

	// process shiptment status update from carrier
	UpdateShipmentStatus(ctx context.Context, workflowID string, runID string, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) error

	// UpdateShipmentStatusAsync starts a(n) shipment.v1.UpdateShipmentStatus update and returns a handle to the workflow update
	UpdateShipmentStatusAsync(ctx context.Context, workflowID string, runID string, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) (UpdateShipmentStatusHandle, error)

	// GetUpdateShipmentStatus retrieves a handle to an existing shipment.v1.UpdateShipmentStatus update
	GetUpdateShipmentStatus(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateShipmentStatusHandle, error)
}

// workerClient implements a temporal client for a oms.shipment.v1.Worker service
type workerClient struct {
	client client.Client
	log    *slog.Logger
}

// NewWorkerClient initializes a new oms.shipment.v1.Worker client
func NewWorkerClient(c client.Client, options ...*workerClientOptions) WorkerClient {
	var cfg *workerClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewWorkerClientOptions()
	}
	return &workerClient{
		client: c,
		log:    cfg.getLogger(),
	}
}

// NewWorkerClientWithOptions initializes a new Worker client with the given options
func NewWorkerClientWithOptions(c client.Client, opts client.Options, options ...*workerClientOptions) (WorkerClient, error) {
	var err error
	c, err = client.NewClientFromExisting(c, opts)
	if err != nil {
		return nil, fmt.Errorf("error initializing client with options: %w", err)
	}
	var cfg *workerClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewWorkerClientOptions()
	}
	return &workerClient{
		client: c,
		log:    cfg.getLogger(),
	}, nil
}

// workerClientOptions describes optional runtime configuration for a WorkerClient
type workerClientOptions struct {
	log *slog.Logger
}

// NewWorkerClientOptions initializes a new workerClientOptions value
func NewWorkerClientOptions() *workerClientOptions {
	return &workerClientOptions{}
}

// WithLogger can be used to override the default logger
func (opts *workerClientOptions) WithLogger(l *slog.Logger) *workerClientOptions {
	if l != nil {
		opts.log = l
	}
	return opts
}

// getLogger returns the configured logger, or the default logger
func (opts *workerClientOptions) getLogger() *slog.Logger {
	if opts != nil && opts.log != nil {
		return opts.log
	}
	return slog.Default()
}

// process a shipment
func (c *workerClient) Shipment(ctx context.Context, req *CreateShipmentInput, options ...*ShipmentOptions) (*CreateShipmentResult, error) {
	run, err := c.ShipmentAsync(ctx, req, options...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// process a shipment
func (c *workerClient) ShipmentAsync(ctx context.Context, req *CreateShipmentInput, options ...*ShipmentOptions) (ShipmentRun, error) {
	var o *ShipmentOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewShipmentOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	run, err := c.client.ExecuteWorkflow(ctx, opts, ShipmentWorkflowName, req)
	if err != nil {
		return nil, err
	}
	if run == nil {
		return nil, errors.New("execute workflow returned nil run")
	}
	return &shipmentRun{
		client: c,
		run:    run,
	}, nil
}

// GetShipment fetches an existing shipment.v1.Shipment execution
func (c *workerClient) GetShipment(ctx context.Context, workflowID string, runID string) ShipmentRun {
	return &shipmentRun{
		client: c,
		run:    c.client.GetWorkflow(ctx, workflowID, runID),
	}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *workerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return c.client.CancelWorkflow(ctx, workflowID, runID)
}

// TerminateWorkflow terminates an existing workflow execution
func (c *workerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.client.TerminateWorkflow(ctx, workflowID, runID, reason, details...)
}

// get shipment status
func (c *workerClient) GetStatus(ctx context.Context, workflowID string, runID string) (*GetShipmentResult, error) {
	var resp GetShipmentResult
	if val, err := c.client.QueryWorkflow(ctx, workflowID, runID, GetStatusQueryName); err != nil {
		return nil, err
	} else if err = val.Get(&resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// notify the requestor of an update to a shipment's status.
func (c *workerClient) ShipmentStatusUpdated(ctx context.Context, workflowID string, runID string, signal *UpdateShipmentStatusInput) error {
	return c.client.SignalWorkflow(ctx, workflowID, runID, ShipmentStatusUpdatedSignalName, signal)
}

// process shiptment status update from carrier
func (c *workerClient) UpdateShipmentStatus(ctx context.Context, workflowID string, runID string, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) error {
	// initialize update options
	o := NewUpdateShipmentStatusOptions()
	if len(opts) > 0 && opts[0].Options != nil {
		o = opts[0]
	}

	// call sync update with WorkflowUpdateStageCompleted wait policy
	handle, err := c.UpdateShipmentStatusAsync(ctx, workflowID, runID, req, o.WithWaitPolicy(client.WorkflowUpdateStageCompleted))
	if err != nil {
		return err
	}

	// block on update completion
	return handle.Get(ctx)
}

// process shiptment status update from carrier
func (c *workerClient) UpdateShipmentStatusAsync(ctx context.Context, workflowID string, runID string, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) (UpdateShipmentStatusHandle, error) {
	// initialize update options
	var o *UpdateShipmentStatusOptions
	if len(opts) > 0 && opts[0] != nil {
		o = opts[0]
	} else {
		o = NewUpdateShipmentStatusOptions()
	}

	// build UpdateWorkflowOptions
	options, err := o.Build(workflowID, runID, req)
	if err != nil {
		return nil, fmt.Errorf("error initializing UpdateWorkflowWithOptions: %w", err)
	}

	// update workflow
	handle, err := c.client.UpdateWorkflow(ctx, *options)
	if err != nil {
		return nil, err
	}
	return &updateShipmentStatusHandle{client: c, handle: handle}, nil
}

// GetUpdateShipmentStatus retrieves a handle to an existing shipment.v1.UpdateShipmentStatus update
func (c *workerClient) GetUpdateShipmentStatus(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateShipmentStatusHandle, error) {
	return &updateShipmentStatusHandle{
		client: c,
		handle: c.client.GetWorkflowUpdateHandle(req),
	}, nil
}

// ShipmentOptions provides configuration for a shipment.v1.Shipment workflow operation
type ShipmentOptions struct {
	options          client.StartWorkflowOptions
	executionTimeout *time.Duration
	id               *string
	idReusePolicy    enumsv1.WorkflowIdReusePolicy
	retryPolicy      *temporal.RetryPolicy
	runTimeout       *time.Duration
	searchAttributes map[string]any
	taskQueue        *string
	taskTimeout      *time.Duration
}

// NewShipmentOptions initializes a new ShipmentOptions value
func NewShipmentOptions() *ShipmentOptions {
	return &ShipmentOptions{}
}

// Build initializes a new go.temporal.io/sdk/client.StartWorkflowOptions value with defaults and overrides applied
func (o *ShipmentOptions) Build(req protoreflect.Message) (client.StartWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.ID = *v
	} else if opts.ID == "" {
		id, err := expression.EvalExpression(ShipmentIdexpression, req)
		if err != nil {
			return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", ShipmentWorkflowName, err)
		}
		opts.ID = id
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	} else if opts.SearchAttributes == nil {
		structured, err := expression.ToStructured(req)
		if err != nil {
			return opts, fmt.Errorf("error serializing input for \"Shipment\" search attribute mapping: %v", err)
		}
		result, err := ShipmentSearchAttributesMapping.Query(structured)
		if err != nil {
			return opts, fmt.Errorf("error executing \"Shipment\" search attribute mapping: %v", err)
		}
		searchAttributes, ok := result.(map[string]any)
		if !ok {
			return opts, fmt.Errorf("expected \"Shipment\" search attribute mapping to return map[string]any, got: %T", result)
		}
		opts.SearchAttributes = searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	return opts, nil
}

// WithStartWorkflowOptions sets the initial go.temporal.io/sdk/client.StartWorkflowOptions
func (o *ShipmentOptions) WithStartWorkflowOptions(options client.StartWorkflowOptions) *ShipmentOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *ShipmentOptions) WithExecutionTimeout(d time.Duration) *ShipmentOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the ID value
func (o *ShipmentOptions) WithID(id string) *ShipmentOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *ShipmentOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *ShipmentOptions {
	o.idReusePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *ShipmentOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *ShipmentOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *ShipmentOptions) WithRunTimeout(d time.Duration) *ShipmentOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *ShipmentOptions) WithSearchAttributes(sa map[string]any) *ShipmentOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *ShipmentOptions) WithTaskTimeout(d time.Duration) *ShipmentOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *ShipmentOptions) WithTaskQueue(tq string) *ShipmentOptions {
	o.taskQueue = &tq
	return o
}

// ShipmentRun describes a(n) shipment.v1.Shipment workflow run
type ShipmentRun interface {
	// ID returns the workflow ID
	ID() string

	// RunID returns the workflow instance ID
	RunID() string

	// Run returns the inner client.WorkflowRun
	Run() client.WorkflowRun

	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) (*CreateShipmentResult, error)

	// Cancel requests cancellation of a workflow in execution, returning an error if applicable
	Cancel(ctx context.Context) error

	// Terminate terminates a workflow in execution, returning an error if applicable
	Terminate(ctx context.Context, reason string, details ...interface{}) error

	// get shipment status
	GetStatus(ctx context.Context) (*GetShipmentResult, error)

	// process shiptment status update from carrier
	UpdateShipmentStatus(ctx context.Context, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) error

	// process shiptment status update from carrier
	UpdateShipmentStatusAsync(ctx context.Context, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) (UpdateShipmentStatusHandle, error)
}

// shipmentRun provides an internal implementation of a(n) ShipmentRunRun
type shipmentRun struct {
	client *workerClient
	run    client.WorkflowRun
}

// ID returns the workflow ID
func (r *shipmentRun) ID() string {
	return r.run.GetID()
}

// Run returns the inner client.WorkflowRun
func (r *shipmentRun) Run() client.WorkflowRun {
	return r.run
}

// RunID returns the execution ID
func (r *shipmentRun) RunID() string {
	return r.run.GetRunID()
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *shipmentRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get blocks until the workflow is complete, returning the result if applicable
func (r *shipmentRun) Get(ctx context.Context) (*CreateShipmentResult, error) {
	var resp CreateShipmentResult
	if err := r.run.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *shipmentRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// get shipment status
func (r *shipmentRun) GetStatus(ctx context.Context) (*GetShipmentResult, error) {
	return r.client.GetStatus(ctx, r.ID(), "")
}

// process shiptment status update from carrier
func (r *shipmentRun) UpdateShipmentStatus(ctx context.Context, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) error {
	return r.client.UpdateShipmentStatus(ctx, r.ID(), r.RunID(), req, opts...)
}

// process shiptment status update from carrier
func (r *shipmentRun) UpdateShipmentStatusAsync(ctx context.Context, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) (UpdateShipmentStatusHandle, error) {
	return r.client.UpdateShipmentStatusAsync(ctx, r.ID(), r.RunID(), req, opts...)
}

// UpdateShipmentStatusHandle describes a(n) shipment.v1.UpdateShipmentStatus update handle
type UpdateShipmentStatusHandle interface {
	// WorkflowID returns the workflow ID
	WorkflowID() string
	// RunID returns the workflow instance ID
	RunID() string
	// UpdateID returns the update ID
	UpdateID() string
	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) error
}

// updateShipmentStatusHandle provides an internal implementation of a(n) UpdateShipmentStatusHandle
type updateShipmentStatusHandle struct {
	client *workerClient
	handle client.WorkflowUpdateHandle
}

// WorkflowID returns the workflow ID
func (h *updateShipmentStatusHandle) WorkflowID() string {
	return h.handle.WorkflowID()
}

// RunID returns the execution ID
func (h *updateShipmentStatusHandle) RunID() string {
	return h.handle.RunID()
}

// UpdateID returns the update ID
func (h *updateShipmentStatusHandle) UpdateID() string {
	return h.handle.UpdateID()
}

// Get blocks until the update wait policy is met, returning the result if applicable
func (h *updateShipmentStatusHandle) Get(ctx context.Context) error {
	var err error
	doneCh := make(chan struct{})
	gctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func() {
		for {
			var deadlineExceeded *serviceerror.DeadlineExceeded
			if err = h.handle.Get(gctx, nil); err != nil && ctx.Err() == nil && (errors.As(err, &deadlineExceeded) || strings.Contains(err.Error(), context.DeadlineExceeded.Error())) {
				continue
			}
			break
		}
		close(doneCh)
	}()

	select {
	case <-ctx.Done():
		return ctx.Err()
	case <-doneCh:
		return err
	}
}

// UpdateShipmentStatusOptions provides configuration for a shipment.v1.UpdateShipmentStatus update operation
type UpdateShipmentStatusOptions struct {
	Options    *client.UpdateWorkflowOptions
	id         *string
	waitPolicy client.WorkflowUpdateStage
}

// NewUpdateShipmentStatusOptions initializes a new UpdateShipmentStatusOptions value
func NewUpdateShipmentStatusOptions() *UpdateShipmentStatusOptions {
	return &UpdateShipmentStatusOptions{Options: &client.UpdateWorkflowOptions{}}
}

// Build initializes a new client.UpdateWorkflowOptions with defaults and overrides applied
func (o *UpdateShipmentStatusOptions) Build(workflowID string, runID string, req *UpdateShipmentStatusInput) (opts *client.UpdateWorkflowOptions, err error) {
	// use user-provided UpdateWorkflowOptions if exists
	if o.Options != nil {
		opts = o.Options
	} else {
		opts = &client.UpdateWorkflowOptions{}
	}

	// set constants
	opts.Args = []any{req}
	opts.RunID = runID
	opts.UpdateName = UpdateShipmentStatusUpdateName
	opts.WorkflowID = workflowID

	// set UpdateID
	if v := o.id; v != nil {
		opts.UpdateID = *v
	}

	// set WaitPolicy
	if v := o.waitPolicy; v != client.WorkflowUpdateStageUnspecified {
		opts.WaitForStage = v
	} else if opts.WaitForStage == client.WorkflowUpdateStageUnspecified {
		opts.WaitForStage = client.WorkflowUpdateStageCompleted
	}
	return opts, nil
}

// WithUpdateID sets the UpdateID
func (o *UpdateShipmentStatusOptions) WithUpdateID(id string) *UpdateShipmentStatusOptions {
	o.id = &id
	return o
}

// WithUpdateWorkflowOptions sets the initial client.UpdateWorkflowOptions
func (o *UpdateShipmentStatusOptions) WithUpdateWorkflowOptions(options client.UpdateWorkflowOptions) *UpdateShipmentStatusOptions {
	o.Options = &options
	return o
}

// WithWaitPolicy sets the WaitPolicy
func (o *UpdateShipmentStatusOptions) WithWaitPolicy(policy client.WorkflowUpdateStage) *UpdateShipmentStatusOptions {
	o.waitPolicy = policy
	return o
}

// Reference to generated workflow functions
var (
	// process a shipment
	ShipmentFunction func(workflow.Context, *CreateShipmentInput) (*CreateShipmentResult, error)
)

// WorkerWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
type (
	// WorkerWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
	WorkerWorkflowFunctions interface {
		// process a shipment
		Shipment(workflow.Context, *CreateShipmentInput) (*CreateShipmentResult, error)
	}
	// workerWorkflowFunctions provides an internal WorkerWorkflowFunctions implementation
	workerWorkflowFunctions struct{}
)

func NewWorkerWorkflowFunctions() WorkerWorkflowFunctions {
	return &workerWorkflowFunctions{}
}

// process a shipment
func (f *workerWorkflowFunctions) Shipment(ctx workflow.Context, req *CreateShipmentInput) (*CreateShipmentResult, error) {
	if ShipmentFunction == nil {
		return nil, errors.New("Shipment requires workflow registration via RegisterWorkerWorkflows or RegisterShipmentWorkflow")
	}
	return ShipmentFunction(ctx, req)
}

// WorkerWorkflows provides methods for initializing new oms.shipment.v1.Worker workflow values
type WorkerWorkflows interface {
	// process a shipment
	Shipment(ctx workflow.Context, input *ShipmentWorkflowInput) (ShipmentWorkflow, error)
}

// RegisterWorkerWorkflows registers oms.shipment.v1.Worker workflows with the given worker
func RegisterWorkerWorkflows(r worker.WorkflowRegistry, workflows WorkerWorkflows) {
	RegisterShipmentWorkflow(r, workflows.Shipment)
}

// RegisterShipmentWorkflow registers a oms.shipment.v1.Worker.Shipment workflow with the given worker
func RegisterShipmentWorkflow(r worker.WorkflowRegistry, wf func(workflow.Context, *ShipmentWorkflowInput) (ShipmentWorkflow, error)) {
	ShipmentFunction = buildShipment(wf)
	r.RegisterWorkflowWithOptions(ShipmentFunction, workflow.RegisterOptions{Name: ShipmentWorkflowName})
}

// buildShipment converts a Shipment workflow struct into a valid workflow function
func buildShipment(ctor func(workflow.Context, *ShipmentWorkflowInput) (ShipmentWorkflow, error)) func(workflow.Context, *CreateShipmentInput) (*CreateShipmentResult, error) {
	return func(ctx workflow.Context, req *CreateShipmentInput) (*CreateShipmentResult, error) {
		input := &ShipmentWorkflowInput{
			Req: req,
		}
		wf, err := ctor(ctx, input)
		if err != nil {
			return nil, err
		}
		if initializable, ok := wf.(helpers.Initializable); ok {
			if err := initializable.Initialize(ctx); err != nil {
				return nil, err
			}
		}
		if err := workflow.SetQueryHandler(ctx, GetStatusQueryName, wf.GetStatus); err != nil {
			return nil, err
		}
		{
			opts := workflow.UpdateHandlerOptions{}
			if err := workflow.SetUpdateHandlerWithOptions(ctx, UpdateShipmentStatusUpdateName, wf.UpdateShipmentStatus, opts); err != nil {
				return nil, err
			}
		}
		return wf.Execute(ctx)
	}
}

// ShipmentWorkflowInput describes the input to a(n) shipment.v1.Shipment workflow constructor
type ShipmentWorkflowInput struct {
	Req *CreateShipmentInput
}

// process a shipment
//
// workflow details: (name: "shipment.v1.Shipment", id: "Shipment:${! id.or(throw("id required")) }")
type ShipmentWorkflow interface {
	// Execute defines the entrypoint to a(n) shipment.v1.Shipment workflow
	Execute(ctx workflow.Context) (*CreateShipmentResult, error)

	// get shipment status
	GetStatus() (*GetShipmentResult, error)

	// process shiptment status update from carrier
	UpdateShipmentStatus(workflow.Context, *UpdateShipmentStatusInput) error
}

// process a shipment
func ShipmentChild(ctx workflow.Context, req *CreateShipmentInput, options ...*ShipmentChildOptions) (*CreateShipmentResult, error) {
	childRun, err := ShipmentChildAsync(ctx, req, options...)
	if err != nil {
		return nil, err
	}
	return childRun.Get(ctx)
}

// process a shipment
func ShipmentChildAsync(ctx workflow.Context, req *CreateShipmentInput, options ...*ShipmentChildOptions) (*ShipmentChildRun, error) {
	var o *ShipmentChildOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewShipmentChildOptions()
	}
	opts, err := o.Build(ctx, req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing workflow.ChildWorkflowOptions: %w", err)
	}
	ctx = workflow.WithChildOptions(ctx, opts)
	return &ShipmentChildRun{Future: workflow.ExecuteChildWorkflow(ctx, ShipmentWorkflowName, req)}, nil
}

// ShipmentChildOptions provides configuration for a child shipment.v1.Shipment workflow operation
type ShipmentChildOptions struct {
	options             workflow.ChildWorkflowOptions
	executionTimeout    *time.Duration
	id                  *string
	idReusePolicy       enumsv1.WorkflowIdReusePolicy
	retryPolicy         *temporal.RetryPolicy
	runTimeout          *time.Duration
	searchAttributes    map[string]any
	taskQueue           *string
	taskTimeout         *time.Duration
	parentClosePolicy   enumsv1.ParentClosePolicy
	waitForCancellation *bool
}

// NewShipmentChildOptions initializes a new ShipmentChildOptions value
func NewShipmentChildOptions() *ShipmentChildOptions {
	return &ShipmentChildOptions{}
}

// Build initializes a new go.temporal.io/sdk/workflow.ChildWorkflowOptions value with defaults and overrides applied
func (o *ShipmentChildOptions) Build(ctx workflow.Context, req protoreflect.Message) (workflow.ChildWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.WorkflowID = *v
	} else if opts.WorkflowID == "" {
		// wrap expression evaluation in local activity
		// more info: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/patches#pv_64-expression-evaluation-local-activity
		if workflow.GetVersion(ctx, "cludden_protoc-gen-go-temporal_64_expression-evaluation-local-activity", workflow.DefaultVersion, 1) == 1 {
			lao := workflow.GetLocalActivityOptions(ctx)
			lao.ScheduleToCloseTimeout = time.Second * 10
			if err := workflow.ExecuteLocalActivity(workflow.WithLocalActivityOptions(ctx, lao), func(ctx context.Context) (string, error) {
				id, err := expression.EvalExpression(ShipmentIdexpression, req)
				if err != nil {
					return "", fmt.Errorf("error evaluating id expression for %q workflow: %w", ShipmentWorkflowName, err)
				}
				return id, nil
			}).Get(ctx, &opts.WorkflowID); err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", ShipmentWorkflowName, err)
			}
		} else {
			id, err := expression.EvalExpression(ShipmentIdexpression, req)
			if err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", ShipmentWorkflowName, err)
			}
			opts.WorkflowID = id
		}
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	} else if opts.SearchAttributes == nil {
		// wrap expression evaluation in local activity
		// more info: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/patches#pv_64-expression-evaluation-local-activity
		if workflow.GetVersion(ctx, "cludden_protoc-gen-go-temporal_64_expression-evaluation-local-activity", workflow.DefaultVersion, 1) == 1 {
			lao := workflow.GetLocalActivityOptions(ctx)
			lao.ScheduleToCloseTimeout = time.Second * 10
			if err := workflow.ExecuteLocalActivity(workflow.WithLocalActivityOptions(ctx, lao), func(ctx context.Context) (map[string]any, error) {
				structured, err := expression.ToStructured(req)
				if err != nil {
					return nil, fmt.Errorf("error serializing input for \"Shipment\" search attribute mapping: %v", err)
				}
				result, err := ShipmentSearchAttributesMapping.Query(structured)
				if err != nil {
					return nil, fmt.Errorf("error executing \"Shipment\" search attribute mapping: %v", err)
				}
				searchAttributes, ok := result.(map[string]any)
				if !ok {
					return nil, fmt.Errorf("expected \"Shipment\" search attribute mapping to return map[string]any, got: %T", result)
				}
				return searchAttributes, nil
			}).Get(ctx, &opts.SearchAttributes); err != nil {
				return opts, fmt.Errorf("error evaluating search attributes for %q workflow: %w", ShipmentWorkflowName, err)
			}
		} else {
			structured, err := expression.ToStructured(req)
			if err != nil {
				return opts, fmt.Errorf("error serializing input for \"Shipment\" search attribute mapping: %v", err)
			}
			result, err := ShipmentSearchAttributesMapping.Query(structured)
			if err != nil {
				return opts, fmt.Errorf("error executing \"Shipment\" search attribute mapping: %v", err)
			}
			searchAttributes, ok := result.(map[string]any)
			if !ok {
				return opts, fmt.Errorf("expected \"Shipment\" search attribute mapping to return map[string]any, got: %T", result)
			}
			opts.SearchAttributes = searchAttributes
		}
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	if v := o.parentClosePolicy; v != enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		opts.ParentClosePolicy = v
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return opts, nil
}

// WithChildWorkflowOptions sets the initial go.temporal.io/sdk/workflow.ChildWorkflowOptions
func (o *ShipmentChildOptions) WithChildWorkflowOptions(options workflow.ChildWorkflowOptions) *ShipmentChildOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *ShipmentChildOptions) WithExecutionTimeout(d time.Duration) *ShipmentChildOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the WorkflowID value
func (o *ShipmentChildOptions) WithID(id string) *ShipmentChildOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *ShipmentChildOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *ShipmentChildOptions {
	o.idReusePolicy = policy
	return o
}

// WithParentClosePolicy sets the WorkflowIDReusePolicy value
func (o *ShipmentChildOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *ShipmentChildOptions {
	o.parentClosePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *ShipmentChildOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *ShipmentChildOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *ShipmentChildOptions) WithRunTimeout(d time.Duration) *ShipmentChildOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *ShipmentChildOptions) WithSearchAttributes(sa map[string]any) *ShipmentChildOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *ShipmentChildOptions) WithTaskTimeout(d time.Duration) *ShipmentChildOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *ShipmentChildOptions) WithTaskQueue(tq string) *ShipmentChildOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *ShipmentChildOptions) WithWaitForCancellation(wait bool) *ShipmentChildOptions {
	o.waitForCancellation = &wait
	return o
}

// ShipmentChildRun describes a child Shipment workflow run
type ShipmentChildRun struct {
	Future workflow.ChildWorkflowFuture
}

// Get blocks until the workflow is completed, returning the response value
func (r *ShipmentChildRun) Get(ctx workflow.Context) (*CreateShipmentResult, error) {
	var resp CreateShipmentResult
	if err := r.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds this completion to the selector. Callback can be nil.
func (r *ShipmentChildRun) Select(sel workflow.Selector, fn func(*ShipmentChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future, func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// SelectStart adds waiting for start to the selector. Callback can be nil.
func (r *ShipmentChildRun) SelectStart(sel workflow.Selector, fn func(*ShipmentChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future.GetChildWorkflowExecution(), func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// WaitStart waits for the child workflow to start
func (r *ShipmentChildRun) WaitStart(ctx workflow.Context) (*workflow.Execution, error) {
	var exec workflow.Execution
	if err := r.Future.GetChildWorkflowExecution().Get(ctx, &exec); err != nil {
		return nil, err
	}
	return &exec, nil
}

// ShipmentStatusUpdatedSignal describes a(n) oms.shipment.v1.Worker.ShipmentStatusUpdated signal
type ShipmentStatusUpdatedSignal struct {
	Channel workflow.ReceiveChannel
}

// NewShipmentStatusUpdatedSignal initializes a new shipment.v1.ShipmentStatusUpdated signal wrapper
func NewShipmentStatusUpdatedSignal(ctx workflow.Context) *ShipmentStatusUpdatedSignal {
	return &ShipmentStatusUpdatedSignal{Channel: workflow.GetSignalChannel(ctx, ShipmentStatusUpdatedSignalName)}
}

// Receive blocks until a(n) oms.shipment.v1.Worker.ShipmentStatusUpdated signal is received
func (s *ShipmentStatusUpdatedSignal) Receive(ctx workflow.Context) (*UpdateShipmentStatusInput, bool) {
	var resp UpdateShipmentStatusInput
	more := s.Channel.Receive(ctx, &resp)
	return &resp, more
}

// ReceiveAsync checks for a oms.shipment.v1.Worker.ShipmentStatusUpdated signal without blocking
func (s *ShipmentStatusUpdatedSignal) ReceiveAsync() *UpdateShipmentStatusInput {
	var resp UpdateShipmentStatusInput
	if ok := s.Channel.ReceiveAsync(&resp); !ok {
		return nil
	}
	return &resp
}

// ReceiveWithTimeout blocks until a(n) oms.shipment.v1.Worker.ShipmentStatusUpdated signal is received or timeout expires.
// Returns more value of false when Channel is closed.
// Returns ok value of false when no value was found in the channel for the duration of timeout or the ctx was canceled.
// resp will be nil if ok is false.
func (s *ShipmentStatusUpdatedSignal) ReceiveWithTimeout(ctx workflow.Context, timeout time.Duration) (resp *UpdateShipmentStatusInput, ok bool, more bool) {
	resp = &UpdateShipmentStatusInput{}
	if ok, more = s.Channel.ReceiveWithTimeout(ctx, timeout, &resp); !ok {
		return nil, false, more
	}
	return
}

// Select checks for a(n) oms.shipment.v1.Worker.ShipmentStatusUpdated signal without blocking
func (s *ShipmentStatusUpdatedSignal) Select(sel workflow.Selector, fn func(*UpdateShipmentStatusInput)) workflow.Selector {
	return sel.AddReceive(s.Channel, func(workflow.ReceiveChannel, bool) {
		req := s.ReceiveAsync()
		if fn != nil {
			fn(req)
		}
	})
}

// notify the requestor of an update to a shipment's status.
func ShipmentStatusUpdatedExternal(ctx workflow.Context, workflowID string, runID string, req *UpdateShipmentStatusInput) error {
	return ShipmentStatusUpdatedExternalAsync(ctx, workflowID, runID, req).Get(ctx, nil)
}

// notify the requestor of an update to a shipment's status.
func ShipmentStatusUpdatedExternalAsync(ctx workflow.Context, workflowID string, runID string, req *UpdateShipmentStatusInput) workflow.Future {
	return workflow.SignalExternalWorkflow(ctx, workflowID, runID, ShipmentStatusUpdatedSignalName, req)
}

// WorkerActivities describes available worker activities
type WorkerActivities interface {
	// books shipment with carrier and persists record to database
	CreateShipment(ctx context.Context, req *CreateShipmentInput) (*CreateShipmentResult, error)

	// process shiptment status update from carrier
	UpdateShipmentStatus(ctx context.Context, req *UpdateShipmentStatusInput) error
}

// RegisterWorkerActivities registers activities with a worker
func RegisterWorkerActivities(r worker.ActivityRegistry, activities WorkerActivities) {
	RegisterCreateShipmentActivity(r, activities.CreateShipment)
	RegisterUpdateShipmentStatusActivity(r, activities.UpdateShipmentStatus)
}

// RegisterCreateShipmentActivity registers a oms.shipment.v1.Worker.CreateShipment activity
func RegisterCreateShipmentActivity(r worker.ActivityRegistry, fn func(context.Context, *CreateShipmentInput) (*CreateShipmentResult, error)) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: CreateShipmentActivityName,
	})
}

// CreateShipmentFuture describes a(n) oms.shipment.v1.Worker.CreateShipment activity execution
type CreateShipmentFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *CreateShipmentFuture) Get(ctx workflow.Context) (*CreateShipmentResult, error) {
	var resp CreateShipmentResult
	if err := f.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *CreateShipmentFuture) Select(sel workflow.Selector, fn func(*CreateShipmentFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// books shipment with carrier and persists record to database
func CreateShipment(ctx workflow.Context, req *CreateShipmentInput, options ...*CreateShipmentActivityOptions) (*CreateShipmentResult, error) {
	return CreateShipmentAsync(ctx, req, options...).Get(ctx)
}

// books shipment with carrier and persists record to database
func CreateShipmentAsync(ctx workflow.Context, req *CreateShipmentInput, options ...*CreateShipmentActivityOptions) *CreateShipmentFuture {
	var o *CreateShipmentActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateShipmentActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &CreateShipmentFuture{Future: errF}
	}
	activity := CreateShipmentActivityName
	future := &CreateShipmentFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// books shipment with carrier and persists record to database
func CreateShipmentLocal(ctx workflow.Context, req *CreateShipmentInput, options ...*CreateShipmentLocalActivityOptions) (*CreateShipmentResult, error) {
	return CreateShipmentLocalAsync(ctx, req, options...).Get(ctx)
}

// books shipment with carrier and persists record to database
func CreateShipmentLocalAsync(ctx workflow.Context, req *CreateShipmentInput, options ...*CreateShipmentLocalActivityOptions) *CreateShipmentFuture {
	var o *CreateShipmentLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateShipmentLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &CreateShipmentFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = CreateShipmentActivityName
	}
	future := &CreateShipmentFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// CreateShipmentActivityOptions provides configuration for a(n) oms.shipment.v1.Worker.CreateShipment activity
type CreateShipmentActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewCreateShipmentActivityOptions initializes a new CreateShipmentActivityOptions value
func NewCreateShipmentActivityOptions() *CreateShipmentActivityOptions {
	return &CreateShipmentActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *CreateShipmentActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumInterval: 5000000000}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 5000000000 // 5 seconds
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *CreateShipmentActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *CreateShipmentActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *CreateShipmentActivityOptions) WithHeartbeatTimeout(d time.Duration) *CreateShipmentActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateShipmentActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateShipmentActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *CreateShipmentActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *CreateShipmentActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *CreateShipmentActivityOptions) WithScheduleToStartTimeout(d time.Duration) *CreateShipmentActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *CreateShipmentActivityOptions) WithStartToCloseTimeout(d time.Duration) *CreateShipmentActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *CreateShipmentActivityOptions) WithTaskQueue(tq string) *CreateShipmentActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *CreateShipmentActivityOptions) WithWaitForCancellation(wait bool) *CreateShipmentActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// CreateShipmentLocalActivityOptions provides configuration for a(n) oms.shipment.v1.Worker.CreateShipment activity
type CreateShipmentLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *CreateShipmentInput) (*CreateShipmentResult, error)
}

// NewCreateShipmentLocalActivityOptions initializes a new CreateShipmentLocalActivityOptions value
func NewCreateShipmentLocalActivityOptions() *CreateShipmentLocalActivityOptions {
	return &CreateShipmentLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *CreateShipmentLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	} else if opts.RetryPolicy == nil {
		opts.RetryPolicy = &temporal.RetryPolicy{MaximumInterval: 5000000000}
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 5000000000 // 5 seconds
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom oms.shipment.v1.Worker.CreateShipment implementation
func (o *CreateShipmentLocalActivityOptions) Local(fn func(context.Context, *CreateShipmentInput) (*CreateShipmentResult, error)) *CreateShipmentLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *CreateShipmentLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *CreateShipmentLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateShipmentLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateShipmentLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *CreateShipmentLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *CreateShipmentLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *CreateShipmentLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *CreateShipmentLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// RegisterUpdateShipmentStatusActivity registers a oms.shipment.v1.Worker.UpdateShipmentStatus activity
func RegisterUpdateShipmentStatusActivity(r worker.ActivityRegistry, fn func(context.Context, *UpdateShipmentStatusInput) error) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: UpdateShipmentStatusActivityName,
	})
}

// UpdateShipmentStatusFuture describes a(n) oms.shipment.v1.Worker.UpdateShipmentStatus activity execution
type UpdateShipmentStatusFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *UpdateShipmentStatusFuture) Get(ctx workflow.Context) error {
	return f.Future.Get(ctx, nil)
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *UpdateShipmentStatusFuture) Select(sel workflow.Selector, fn func(*UpdateShipmentStatusFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// process shiptment status update from carrier
func UpdateShipmentStatus(ctx workflow.Context, req *UpdateShipmentStatusInput, options ...*UpdateShipmentStatusActivityOptions) error {
	return UpdateShipmentStatusAsync(ctx, req, options...).Get(ctx)
}

// process shiptment status update from carrier
func UpdateShipmentStatusAsync(ctx workflow.Context, req *UpdateShipmentStatusInput, options ...*UpdateShipmentStatusActivityOptions) *UpdateShipmentStatusFuture {
	var o *UpdateShipmentStatusActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewUpdateShipmentStatusActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &UpdateShipmentStatusFuture{Future: errF}
	}
	activity := UpdateShipmentStatusActivityName
	future := &UpdateShipmentStatusFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// process shiptment status update from carrier
func UpdateShipmentStatusLocal(ctx workflow.Context, req *UpdateShipmentStatusInput, options ...*UpdateShipmentStatusLocalActivityOptions) error {
	return UpdateShipmentStatusLocalAsync(ctx, req, options...).Get(ctx)
}

// process shiptment status update from carrier
func UpdateShipmentStatusLocalAsync(ctx workflow.Context, req *UpdateShipmentStatusInput, options ...*UpdateShipmentStatusLocalActivityOptions) *UpdateShipmentStatusFuture {
	var o *UpdateShipmentStatusLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewUpdateShipmentStatusLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &UpdateShipmentStatusFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = UpdateShipmentStatusActivityName
	}
	future := &UpdateShipmentStatusFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// UpdateShipmentStatusActivityOptions provides configuration for a(n) oms.shipment.v1.Worker.UpdateShipmentStatus activity
type UpdateShipmentStatusActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewUpdateShipmentStatusActivityOptions initializes a new UpdateShipmentStatusActivityOptions value
func NewUpdateShipmentStatusActivityOptions() *UpdateShipmentStatusActivityOptions {
	return &UpdateShipmentStatusActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *UpdateShipmentStatusActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 5000000000 // 5 seconds
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *UpdateShipmentStatusActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *UpdateShipmentStatusActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *UpdateShipmentStatusActivityOptions) WithHeartbeatTimeout(d time.Duration) *UpdateShipmentStatusActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *UpdateShipmentStatusActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *UpdateShipmentStatusActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *UpdateShipmentStatusActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *UpdateShipmentStatusActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *UpdateShipmentStatusActivityOptions) WithScheduleToStartTimeout(d time.Duration) *UpdateShipmentStatusActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *UpdateShipmentStatusActivityOptions) WithStartToCloseTimeout(d time.Duration) *UpdateShipmentStatusActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *UpdateShipmentStatusActivityOptions) WithTaskQueue(tq string) *UpdateShipmentStatusActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *UpdateShipmentStatusActivityOptions) WithWaitForCancellation(wait bool) *UpdateShipmentStatusActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// UpdateShipmentStatusLocalActivityOptions provides configuration for a(n) oms.shipment.v1.Worker.UpdateShipmentStatus activity
type UpdateShipmentStatusLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *UpdateShipmentStatusInput) error
}

// NewUpdateShipmentStatusLocalActivityOptions initializes a new UpdateShipmentStatusLocalActivityOptions value
func NewUpdateShipmentStatusLocalActivityOptions() *UpdateShipmentStatusLocalActivityOptions {
	return &UpdateShipmentStatusLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *UpdateShipmentStatusLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 5000000000 // 5 seconds
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom oms.shipment.v1.Worker.UpdateShipmentStatus implementation
func (o *UpdateShipmentStatusLocalActivityOptions) Local(fn func(context.Context, *UpdateShipmentStatusInput) error) *UpdateShipmentStatusLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *UpdateShipmentStatusLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *UpdateShipmentStatusLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *UpdateShipmentStatusLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *UpdateShipmentStatusLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *UpdateShipmentStatusLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *UpdateShipmentStatusLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *UpdateShipmentStatusLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *UpdateShipmentStatusLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// TestClient provides a testsuite-compatible Client
type TestWorkerClient struct {
	env       *testsuite.TestWorkflowEnvironment
	workflows WorkerWorkflows
}

var _ WorkerClient = &TestWorkerClient{}

// NewTestWorkerClient initializes a new TestWorkerClient value
func NewTestWorkerClient(env *testsuite.TestWorkflowEnvironment, workflows WorkerWorkflows, activities WorkerActivities) *TestWorkerClient {
	if workflows != nil {
		RegisterWorkerWorkflows(env, workflows)
	}
	if activities != nil {
		RegisterWorkerActivities(env, activities)
	}
	return &TestWorkerClient{env, workflows}
}

// Shipment executes a(n) shipment.v1.Shipment workflow in the test environment
func (c *TestWorkerClient) Shipment(ctx context.Context, req *CreateShipmentInput, opts ...*ShipmentOptions) (*CreateShipmentResult, error) {
	run, err := c.ShipmentAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// ShipmentAsync executes a(n) shipment.v1.Shipment workflow in the test environment
func (c *TestWorkerClient) ShipmentAsync(ctx context.Context, req *CreateShipmentInput, options ...*ShipmentOptions) (ShipmentRun, error) {
	var o *ShipmentOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewShipmentOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	return &testShipmentRun{client: c, env: c.env, opts: &opts, req: req, workflows: c.workflows}, nil
}

// GetShipment is a noop
func (c *TestWorkerClient) GetShipment(ctx context.Context, workflowID string, runID string) ShipmentRun {
	return &testShipmentRun{env: c.env, workflows: c.workflows}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *TestWorkerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	c.env.CancelWorkflow()
	return nil
}

// TerminateWorkflow terminates an existing workflow execution
func (c *TestWorkerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.CancelWorkflow(ctx, workflowID, runID)
}

// GetStatus executes a shipment.v1.Status query
func (c *TestWorkerClient) GetStatus(ctx context.Context, workflowID string, runID string) (*GetShipmentResult, error) {
	val, err := c.env.QueryWorkflow(GetStatusQueryName)
	if err != nil {
		return nil, err
	} else if !val.HasValue() {
		return nil, nil
	} else {
		var result GetShipmentResult
		if err := val.Get(&result); err != nil {
			return nil, err
		}
		return &result, nil
	}
}

// ShipmentStatusUpdated executes a shipment.v1.ShipmentStatusUpdated signal
func (c *TestWorkerClient) ShipmentStatusUpdated(ctx context.Context, workflowID string, runID string, req *UpdateShipmentStatusInput) error {
	c.env.SignalWorkflow(ShipmentStatusUpdatedSignalName, req)
	return nil
}

// UpdateShipmentStatus executes a(n) shipment.v1.UpdateShipmentStatus update in the test environment
func (c *TestWorkerClient) UpdateShipmentStatus(ctx context.Context, workflowID string, runID string, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) error {
	options := NewUpdateShipmentStatusOptions()
	if len(opts) > 0 && opts[0].Options != nil {
		options = opts[0]
	}
	options.Options.WaitForStage = client.WorkflowUpdateStageCompleted
	handle, err := c.UpdateShipmentStatusAsync(ctx, workflowID, runID, req, options)
	if err != nil {
		return err
	}
	return handle.Get(ctx)
}

// UpdateShipmentStatusAsync executes a(n) shipment.v1.UpdateShipmentStatus update in the test environment
func (c *TestWorkerClient) UpdateShipmentStatusAsync(ctx context.Context, workflowID string, runID string, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) (UpdateShipmentStatusHandle, error) {
	var o *UpdateShipmentStatusOptions
	if len(opts) > 0 && opts[0] != nil {
		o = opts[0]
	} else {
		o = NewUpdateShipmentStatusOptions()
	}
	options, err := o.Build(workflowID, runID, req)
	if err != nil {
		return nil, fmt.Errorf("error initializing UpdateWorkflowWithOptions: %w", err)
	}
	uc := testutil.NewUpdateCallbacks()
	c.env.UpdateWorkflow(UpdateShipmentStatusUpdateName, workflowID, uc, req)
	return &testUpdateShipmentStatusHandle{
		callbacks:  uc,
		env:        c.env,
		opts:       options,
		runID:      runID,
		workflowID: workflowID,
		req:        req,
	}, nil
}

// GetUpdateShipmentStatus retrieves a handle to an existing shipment.v1.UpdateShipmentStatus update
func (c *TestWorkerClient) GetUpdateShipmentStatus(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateShipmentStatusHandle, error) {
	return nil, errors.New("unimplemented")
}

var _ UpdateShipmentStatusHandle = &testUpdateShipmentStatusHandle{}

// testUpdateShipmentStatusHandle provides an internal implementation of a(n) UpdateShipmentStatusHandle
type testUpdateShipmentStatusHandle struct {
	callbacks  *testutil.UpdateCallbacks
	env        *testsuite.TestWorkflowEnvironment
	opts       *client.UpdateWorkflowOptions
	req        *UpdateShipmentStatusInput
	runID      string
	workflowID string
}

// Get retrieves a test shipment.v1.UpdateShipmentStatus update result
func (h *testUpdateShipmentStatusHandle) Get(ctx context.Context) error {
	if _, err := h.callbacks.Get(ctx); err != nil {
		return err
	} else {
		return nil
	}
}

// RunID implementation
func (h *testUpdateShipmentStatusHandle) RunID() string {
	return h.runID
}

// UpdateID implementation
func (h *testUpdateShipmentStatusHandle) UpdateID() string {
	if h.opts != nil {
		return h.opts.UpdateID
	}
	return ""
}

// WorkflowID implementation
func (h *testUpdateShipmentStatusHandle) WorkflowID() string {
	return h.workflowID
}

var _ ShipmentRun = &testShipmentRun{}

// testShipmentRun provides convenience methods for interacting with a(n) shipment.v1.Shipment workflow in the test environment
type testShipmentRun struct {
	client    *TestWorkerClient
	env       *testsuite.TestWorkflowEnvironment
	opts      *client.StartWorkflowOptions
	req       *CreateShipmentInput
	workflows WorkerWorkflows
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *testShipmentRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get retrieves a test shipment.v1.Shipment workflow result
func (r *testShipmentRun) Get(context.Context) (*CreateShipmentResult, error) {
	r.env.ExecuteWorkflow(ShipmentWorkflowName, r.req)
	if !r.env.IsWorkflowCompleted() {
		return nil, errors.New("workflow in progress")
	}
	if err := r.env.GetWorkflowError(); err != nil {
		return nil, err
	}
	var result CreateShipmentResult
	if err := r.env.GetWorkflowResult(&result); err != nil {
		return nil, err
	}
	return &result, nil
}

// ID returns a test shipment.v1.Shipment workflow run's workflow ID
func (r *testShipmentRun) ID() string {
	if r.opts != nil {
		return r.opts.ID
	}
	return ""
}

// Run noop implementation
func (r *testShipmentRun) Run() client.WorkflowRun {
	return nil
}

// RunID noop implementation
func (r *testShipmentRun) RunID() string {
	return ""
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *testShipmentRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// GetStatus executes a shipment.v1.Status query against a test shipment.v1.Shipment workflow
func (r *testShipmentRun) GetStatus(ctx context.Context) (*GetShipmentResult, error) {
	return r.client.GetStatus(ctx, r.ID(), r.RunID())
}

// UpdateShipmentStatus executes a(n) shipment.v1.UpdateShipmentStatus update against a test shipment.v1.Shipment workflow
func (r *testShipmentRun) UpdateShipmentStatus(ctx context.Context, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) error {
	return r.client.UpdateShipmentStatus(ctx, r.ID(), r.RunID(), req, opts...)
}

// UpdateShipmentStatusAsync executes a(n) shipment.v1.UpdateShipmentStatus update against a test shipment.v1.Shipment workflow
func (r *testShipmentRun) UpdateShipmentStatusAsync(ctx context.Context, req *UpdateShipmentStatusInput, opts ...*UpdateShipmentStatusOptions) (UpdateShipmentStatusHandle, error) {
	return r.client.UpdateShipmentStatusAsync(ctx, r.ID(), r.RunID(), req, opts...)
}

// WorkerCliOptions describes runtime configuration for oms.shipment.v1.Worker cli
type WorkerCliOptions struct {
	after            func(*v2.Context) error
	before           func(*v2.Context) error
	clientForCommand func(*v2.Context) (client.Client, error)
	worker           func(*v2.Context, client.Client) (worker.Worker, error)
}

// NewWorkerCliOptions initializes a new WorkerCliOptions value
func NewWorkerCliOptions() *WorkerCliOptions {
	return &WorkerCliOptions{}
}

// WithAfter injects a custom After hook to be run after any command invocation
func (opts *WorkerCliOptions) WithAfter(fn func(*v2.Context) error) *WorkerCliOptions {
	opts.after = fn
	return opts
}

// WithBefore injects a custom Before hook to be run prior to any command invocation
func (opts *WorkerCliOptions) WithBefore(fn func(*v2.Context) error) *WorkerCliOptions {
	opts.before = fn
	return opts
}

// WithClient provides a Temporal client factory for use by commands
func (opts *WorkerCliOptions) WithClient(fn func(*v2.Context) (client.Client, error)) *WorkerCliOptions {
	opts.clientForCommand = fn
	return opts
}

// WithWorker provides an method for initializing a worker
func (opts *WorkerCliOptions) WithWorker(fn func(*v2.Context, client.Client) (worker.Worker, error)) *WorkerCliOptions {
	opts.worker = fn
	return opts
}

// NewWorkerCli initializes a cli for a(n) oms.shipment.v1.Worker service
func NewWorkerCli(options ...*WorkerCliOptions) (*v2.App, error) {
	commands, err := newWorkerCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.App{
		Name:     "worker",
		Commands: commands,
	}, nil
}

// NewWorkerCliCommand initializes a cli command for a oms.shipment.v1.Worker service with subcommands for each query, signal, update, and workflow
func NewWorkerCliCommand(options ...*WorkerCliOptions) (*v2.Command, error) {
	subcommands, err := newWorkerCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.Command{
		Name:        "worker",
		Subcommands: subcommands,
	}, nil
}

// newWorkerCommands initializes (sub)commands for a oms.shipment.v1.Worker cli or command
func newWorkerCommands(options ...*WorkerCliOptions) ([]*v2.Command, error) {
	opts := &WorkerCliOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if opts.clientForCommand == nil {
		opts.clientForCommand = func(*v2.Context) (client.Client, error) {
			return client.Dial(client.Options{})
		}
	}
	commands := []*v2.Command{
		{
			Name:                   "get-status",
			Usage:                  "get shipment status",
			Category:               "QUERIES",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewWorkerClient(c)
				if resp, err := client.GetStatus(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id")); err != nil {
					return fmt.Errorf("error executing %q query: %w", GetStatusQueryName, err)
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
		{
			Name:                   "shipment-status-updated",
			Usage:                  "notify the requestor of an update to a shipment's status.",
			Category:               "SIGNALS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "shipment-id",
					Usage:    "set the value of the operation's \"ShipmentId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "status",
					Usage:    "set the value of the operation's \"Status\" parameter (SHIPMENT_STATUS_UNSPECIFIED, SHIPMENT_STATUS_PENDING, SHIPMENT_STATUS_BOOKED, SHIPMENT_STATUS_DISPATCHED, SHIPMENT_STATUS_DELIVERED)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "updated-at",
					Usage:    "set the value of the operation's \"UpdatedAt\" parameter (e.g. \"2017-01-15T01:30:15.01Z\")",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewWorkerClient(c)
				req, err := UnmarshalCliFlagsToUpdateShipmentStatusInput(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				if err := client.ShipmentStatusUpdated(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id"), req); err != nil {
					return fmt.Errorf("error sending %q signal: %w", ShipmentStatusUpdatedSignalName, err)
				}
				fmt.Println("success")
				return nil
			},
		},
		{
			Name:                   "update-shipment-status",
			Usage:                  "process shiptment status update from carrier",
			Category:               "UPDATES",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow update in the background and print workflow, execution, and udpate id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "shipment-id",
					Usage:    "set the value of the operation's \"ShipmentId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "status",
					Usage:    "set the value of the operation's \"Status\" parameter (SHIPMENT_STATUS_UNSPECIFIED, SHIPMENT_STATUS_PENDING, SHIPMENT_STATUS_BOOKED, SHIPMENT_STATUS_DISPATCHED, SHIPMENT_STATUS_DELIVERED)",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "updated-at",
					Usage:    "set the value of the operation's \"UpdatedAt\" parameter (e.g. \"2017-01-15T01:30:15.01Z\")",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewWorkerClient(c)
				req, err := UnmarshalCliFlagsToUpdateShipmentStatusInput(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				handle, err := client.UpdateShipmentStatusAsync(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id"), req)
				if err != nil {
					return fmt.Errorf("error executing %s update: %w", UpdateShipmentStatusUpdateName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", handle.WorkflowID())
					fmt.Printf("run id: %s\n", handle.RunID())
					fmt.Printf("update id: %s\n", handle.UpdateID())
					return nil
				}
				if err := handle.Get(cmd.Context); err != nil {
					return err
				} else {
					return nil
				}
			},
		},
		{
			Name:                   "shipment",
			Usage:                  "process a shipment",
			Category:               "WORKFLOWS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow in the background and print workflow and execution id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:    "task-queue",
					Usage:   "task queue name",
					Aliases: []string{"t"},
					EnvVars: []string{"TEMPORAL_TASK_QUEUE_NAME", "TEMPORAL_TASK_QUEUE", "TASK_QUEUE_NAME", "TASK_QUEUE"},
					Value:   "shipment-v1",
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "customer-id",
					Usage:    "set the value of the operation's \"CustomerId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "fulfillment-id",
					Usage:    "set the value of the operation's \"FulfillmentId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "items",
					Usage:    "set the value of the operation's \"Items\" parameter (json-encoded: {sku: <string>, description: <string>, quantity: <int32>})",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "order-id",
					Usage:    "set the value of the operation's \"OrderId\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "requestor-wid",
					Usage:    "set the value of the operation's \"RequestorWid\" parameter",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				tc, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer tc.Close()
				c := NewWorkerClient(tc)
				req, err := UnmarshalCliFlagsToCreateShipmentInput(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				opts := client.StartWorkflowOptions{}
				if tq := cmd.String("task-queue"); tq != "" {
					opts.TaskQueue = tq
				}
				run, err := c.ShipmentAsync(cmd.Context, req, NewShipmentOptions().WithStartWorkflowOptions(opts))
				if err != nil {
					return fmt.Errorf("error starting %s workflow: %w", ShipmentWorkflowName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", run.ID())
					fmt.Printf("run id: %s\n", run.RunID())
					return nil
				}
				if resp, err := run.Get(cmd.Context); err != nil {
					return err
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
	}
	if opts.worker != nil {
		commands = append(commands, []*v2.Command{
			{
				Name:                   "worker",
				Usage:                  "runs a oms.shipment.v1.Worker worker process",
				UseShortOptionHandling: true,
				Before:                 opts.before,
				After:                  opts.after,
				Action: func(cmd *v2.Context) error {
					c, err := opts.clientForCommand(cmd)
					if err != nil {
						return fmt.Errorf("error initializing client for command: %w", err)
					}
					defer c.Close()
					w, err := opts.worker(cmd, c)
					if opts.worker != nil {
						if err != nil {
							return fmt.Errorf("error initializing worker: %w", err)
						}
					}
					if err := w.Start(); err != nil {
						return fmt.Errorf("error starting worker: %w", err)
					}
					defer w.Stop()
					<-cmd.Context.Done()
					return nil
				},
			},
		}...)
	}
	sort.Slice(commands, func(i, j int) bool {
		return commands[i].Name < commands[j].Name
	})
	return commands, nil
}

// UnmarshalCliFlagsToUpdateShipmentStatusInput unmarshals a UpdateShipmentStatusInput from command line flags
func UnmarshalCliFlagsToUpdateShipmentStatusInput(cmd *v2.Context) (*UpdateShipmentStatusInput, error) {
	var result UpdateShipmentStatusInput
	var hasValues bool
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
		hasValues = true
	}
	if cmd.IsSet("shipment-id") {
		hasValues = true
		result.ShipmentId = cmd.String("shipment-id")
	}
	if cmd.IsSet("status") {
		hasValues = true
		v, ok := v1.ShipmentStatus_value[cmd.String("status")]
		if !ok {
			return nil, fmt.Errorf("unsupported enum value for \"status\" flag: %q", cmd.String("status"))
		}
		result.Status = v1.ShipmentStatus(v)
	}
	if cmd.IsSet("updated-at") {
		hasValues = true
		v, err := time.Parse(time.RFC3339Nano, cmd.String("updated-at"))
		if err != nil {
			return nil, fmt.Errorf("error unmarshalling \"updated-at\" timestamp flag: %w", err)
		}
		result.UpdatedAt = timestamppb.New(v)
	}
	if !hasValues {
		return nil, nil
	}
	return &result, nil
}

// UnmarshalCliFlagsToCreateShipmentInput unmarshals a CreateShipmentInput from command line flags
func UnmarshalCliFlagsToCreateShipmentInput(cmd *v2.Context) (*CreateShipmentInput, error) {
	var result CreateShipmentInput
	var hasValues bool
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
		hasValues = true
	}
	if cmd.IsSet("customer-id") {
		hasValues = true
		result.CustomerId = cmd.String("customer-id")
	}
	if cmd.IsSet("fulfillment-id") {
		hasValues = true
		result.FulfillmentId = cmd.String("fulfillment-id")
	}
	if cmd.IsSet("id") {
		hasValues = true
		result.Id = cmd.String("id")
	}
	if cmd.IsSet("items") {
		hasValues = true
		var tmp CreateShipmentInput
		if err := protojson.Unmarshal([]byte(fmt.Sprintf("{\"items\":%s}", cmd.String("items"))), &tmp); err != nil {
			return nil, fmt.Errorf("error unmarshalling \"items\" map flag: %w", err)
		}
		result.Items = tmp.Items
	}
	if cmd.IsSet("order-id") {
		hasValues = true
		result.OrderId = cmd.String("order-id")
	}
	if cmd.IsSet("requestor-wid") {
		hasValues = true
		result.RequestorWid = cmd.String("requestor-wid")
	}
	if !hasValues {
		return nil, nil
	}
	return &result, nil
}

// WithWorkerSchemeTypes registers all Worker protobuf types with the given scheme
func WithWorkerSchemeTypes() scheme.Option {
	return func(s *scheme.Scheme) {
		s.RegisterType(File_oms_shipment_v1_shipment_proto.Messages().ByName("CreateShipmentInput"))
		s.RegisterType(File_oms_shipment_v1_shipment_proto.Messages().ByName("CreateShipmentResult"))
		s.RegisterType(File_oms_shipment_v1_shipment_proto.Messages().ByName("UpdateShipmentStatusInput"))
		s.RegisterType(File_oms_shipment_v1_shipment_proto.Messages().ByName("GetShipmentResult"))
	}
}
