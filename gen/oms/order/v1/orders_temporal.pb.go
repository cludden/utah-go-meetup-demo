// Code generated by protoc-gen-go_temporal. DO NOT EDIT.
// versions:
//
//	protoc-gen-go_temporal 1.14.3 (d2f9bfc0a16171313109a7b80bc10fabc41196e0)
//	go go1.21.12
//	protoc (unknown)
//
// source: oms/order/v1/orders.proto
package orderv1

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	expression "github.com/cludden/protoc-gen-go-temporal/pkg/expression"
	helpers "github.com/cludden/protoc-gen-go-temporal/pkg/helpers"
	scheme "github.com/cludden/protoc-gen-go-temporal/pkg/scheme"
	testutil "github.com/cludden/protoc-gen-go-temporal/pkg/testutil"
	gohomedir "github.com/mitchellh/go-homedir"
	v1 "github.com/temporalio/reference-app-orders-go/gen/oms/shipment/v1"
	v11 "github.com/temporalio/reference-app-orders-go/gen/oms/v1"
	v2 "github.com/urfave/cli/v2"
	enumsv1 "go.temporal.io/api/enums/v1"
	serviceerror "go.temporal.io/api/serviceerror"
	activity "go.temporal.io/sdk/activity"
	client "go.temporal.io/sdk/client"
	temporal "go.temporal.io/sdk/temporal"
	testsuite "go.temporal.io/sdk/testsuite"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	protojson "google.golang.org/protobuf/encoding/protojson"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	"log/slog"
	"os"
	"sort"
	"strings"
	"time"
)

// WorkerTaskQueue is the default task-queue for a oms.order.v1.Worker worker
const WorkerTaskQueue = "order-v1"

// oms.order.v1.Worker workflow names
const (
	OrderWorkflowName = "order.v1.Order"
)

// oms.order.v1.Worker workflow id expressions
var (
	OrderIdexpression = expression.MustParseExpression("Order:${! id.or(throw(\"id required\")) }")
)

// oms.order.v1.Worker workflow search attribute mappings
var (
	OrderSearchAttributesMapping = expression.MustParseMapping("CustomerId = customerId \nOrderId = id \n")
)

// oms.order.v1.Worker activity names
const (
	CreateOrderActivityName       = "order.v1.CreateOrder"
	ReserveItemsActivityName      = "order.v1.ReserveItems"
	UpdateOrderStatusActivityName = "order.v1.UpdateOrderStatus"
)

// oms.order.v1.Worker query names
const (
	GetStatusQueryName = "order.v1.GetStatus"
)

// oms.order.v1.Worker signal names
const (
	CustomerActionSignalName = "order.v1.CustomerAction"
)

// oms.order.v1.Worker update names
const (
	UpdateOrderStatusUpdateName = "order.v1.UpdateOrderStatus"
)

// WorkerClient describes a client for a(n) oms.order.v1.Worker worker
type WorkerClient interface {
	// manage the lifecycle of an order
	Order(ctx context.Context, req *CreateOrderInput, opts ...*OrderOptions) (*CreateOrderResult, error)

	// OrderAsync starts a(n) order.v1.Order workflow and returns a handle to the workflow run
	OrderAsync(ctx context.Context, req *CreateOrderInput, opts ...*OrderOptions) (OrderRun, error)

	// GetOrder retrieves a handle to an existing order.v1.Order workflow execution
	GetOrder(ctx context.Context, workflowID string, runID string) OrderRun

	// CancelWorkflow requests cancellation of an existing workflow execution
	CancelWorkflow(ctx context.Context, workflowID string, runID string) error

	// TerminateWorkflow an existing workflow execution
	TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error

	// returns information about the order
	GetStatus(ctx context.Context, workflowID string, runID string) (*GetOrderResult, error)

	// process a customer action
	CustomerAction(ctx context.Context, workflowID string, runID string, signal *CustomerActionInput) error

	// updates the order status in the database
	UpdateOrderStatus(ctx context.Context, workflowID string, runID string, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) error

	// UpdateOrderStatusAsync starts a(n) order.v1.UpdateOrderStatus update and returns a handle to the workflow update
	UpdateOrderStatusAsync(ctx context.Context, workflowID string, runID string, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) (UpdateOrderStatusHandle, error)

	// GetUpdateOrderStatus retrieves a handle to an existing order.v1.UpdateOrderStatus update
	GetUpdateOrderStatus(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateOrderStatusHandle, error)
}

// workerClient implements a temporal client for a oms.order.v1.Worker service
type workerClient struct {
	client client.Client
	log    *slog.Logger
}

// NewWorkerClient initializes a new oms.order.v1.Worker client
func NewWorkerClient(c client.Client, options ...*workerClientOptions) WorkerClient {
	var cfg *workerClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewWorkerClientOptions()
	}
	return &workerClient{
		client: c,
		log:    cfg.getLogger(),
	}
}

// NewWorkerClientWithOptions initializes a new Worker client with the given options
func NewWorkerClientWithOptions(c client.Client, opts client.Options, options ...*workerClientOptions) (WorkerClient, error) {
	var err error
	c, err = client.NewClientFromExisting(c, opts)
	if err != nil {
		return nil, fmt.Errorf("error initializing client with options: %w", err)
	}
	var cfg *workerClientOptions
	if len(options) > 0 {
		cfg = options[0]
	} else {
		cfg = NewWorkerClientOptions()
	}
	return &workerClient{
		client: c,
		log:    cfg.getLogger(),
	}, nil
}

// workerClientOptions describes optional runtime configuration for a WorkerClient
type workerClientOptions struct {
	log *slog.Logger
}

// NewWorkerClientOptions initializes a new workerClientOptions value
func NewWorkerClientOptions() *workerClientOptions {
	return &workerClientOptions{}
}

// WithLogger can be used to override the default logger
func (opts *workerClientOptions) WithLogger(l *slog.Logger) *workerClientOptions {
	if l != nil {
		opts.log = l
	}
	return opts
}

// getLogger returns the configured logger, or the default logger
func (opts *workerClientOptions) getLogger() *slog.Logger {
	if opts != nil && opts.log != nil {
		return opts.log
	}
	return slog.Default()
}

// manage the lifecycle of an order
func (c *workerClient) Order(ctx context.Context, req *CreateOrderInput, options ...*OrderOptions) (*CreateOrderResult, error) {
	run, err := c.OrderAsync(ctx, req, options...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// manage the lifecycle of an order
func (c *workerClient) OrderAsync(ctx context.Context, req *CreateOrderInput, options ...*OrderOptions) (OrderRun, error) {
	var o *OrderOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewOrderOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	run, err := c.client.ExecuteWorkflow(ctx, opts, OrderWorkflowName, req)
	if err != nil {
		return nil, err
	}
	if run == nil {
		return nil, errors.New("execute workflow returned nil run")
	}
	return &orderRun{
		client: c,
		run:    run,
	}, nil
}

// GetOrder fetches an existing order.v1.Order execution
func (c *workerClient) GetOrder(ctx context.Context, workflowID string, runID string) OrderRun {
	return &orderRun{
		client: c,
		run:    c.client.GetWorkflow(ctx, workflowID, runID),
	}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *workerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	return c.client.CancelWorkflow(ctx, workflowID, runID)
}

// TerminateWorkflow terminates an existing workflow execution
func (c *workerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.client.TerminateWorkflow(ctx, workflowID, runID, reason, details...)
}

// returns information about the order
func (c *workerClient) GetStatus(ctx context.Context, workflowID string, runID string) (*GetOrderResult, error) {
	var resp GetOrderResult
	if val, err := c.client.QueryWorkflow(ctx, workflowID, runID, GetStatusQueryName); err != nil {
		return nil, err
	} else if err = val.Get(&resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// process a customer action
func (c *workerClient) CustomerAction(ctx context.Context, workflowID string, runID string, signal *CustomerActionInput) error {
	return c.client.SignalWorkflow(ctx, workflowID, runID, CustomerActionSignalName, signal)
}

// updates the order status in the database
func (c *workerClient) UpdateOrderStatus(ctx context.Context, workflowID string, runID string, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) error {
	// initialize update options
	o := NewUpdateOrderStatusOptions()
	if len(opts) > 0 && opts[0].Options != nil {
		o = opts[0]
	}

	// call sync update with WorkflowUpdateStageCompleted wait policy
	handle, err := c.UpdateOrderStatusAsync(ctx, workflowID, runID, req, o.WithWaitPolicy(client.WorkflowUpdateStageCompleted))
	if err != nil {
		return err
	}

	// block on update completion
	return handle.Get(ctx)
}

// updates the order status in the database
func (c *workerClient) UpdateOrderStatusAsync(ctx context.Context, workflowID string, runID string, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) (UpdateOrderStatusHandle, error) {
	// initialize update options
	var o *UpdateOrderStatusOptions
	if len(opts) > 0 && opts[0] != nil {
		o = opts[0]
	} else {
		o = NewUpdateOrderStatusOptions()
	}

	// build UpdateWorkflowOptions
	options, err := o.Build(workflowID, runID, req)
	if err != nil {
		return nil, fmt.Errorf("error initializing UpdateWorkflowWithOptions: %w", err)
	}

	// update workflow
	handle, err := c.client.UpdateWorkflow(ctx, *options)
	if err != nil {
		return nil, err
	}
	return &updateOrderStatusHandle{client: c, handle: handle}, nil
}

// GetUpdateOrderStatus retrieves a handle to an existing order.v1.UpdateOrderStatus update
func (c *workerClient) GetUpdateOrderStatus(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateOrderStatusHandle, error) {
	return &updateOrderStatusHandle{
		client: c,
		handle: c.client.GetWorkflowUpdateHandle(req),
	}, nil
}

// OrderOptions provides configuration for a order.v1.Order workflow operation
type OrderOptions struct {
	options          client.StartWorkflowOptions
	executionTimeout *time.Duration
	id               *string
	idReusePolicy    enumsv1.WorkflowIdReusePolicy
	retryPolicy      *temporal.RetryPolicy
	runTimeout       *time.Duration
	searchAttributes map[string]any
	taskQueue        *string
	taskTimeout      *time.Duration
}

// NewOrderOptions initializes a new OrderOptions value
func NewOrderOptions() *OrderOptions {
	return &OrderOptions{}
}

// Build initializes a new go.temporal.io/sdk/client.StartWorkflowOptions value with defaults and overrides applied
func (o *OrderOptions) Build(req protoreflect.Message) (client.StartWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.ID = *v
	} else if opts.ID == "" {
		id, err := expression.EvalExpression(OrderIdexpression, req)
		if err != nil {
			return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", OrderWorkflowName, err)
		}
		opts.ID = id
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	} else if opts.SearchAttributes == nil {
		structured, err := expression.ToStructured(req)
		if err != nil {
			return opts, fmt.Errorf("error serializing input for \"Order\" search attribute mapping: %v", err)
		}
		result, err := OrderSearchAttributesMapping.Query(structured)
		if err != nil {
			return opts, fmt.Errorf("error executing \"Order\" search attribute mapping: %v", err)
		}
		searchAttributes, ok := result.(map[string]any)
		if !ok {
			return opts, fmt.Errorf("expected \"Order\" search attribute mapping to return map[string]any, got: %T", result)
		}
		opts.SearchAttributes = searchAttributes
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	return opts, nil
}

// WithStartWorkflowOptions sets the initial go.temporal.io/sdk/client.StartWorkflowOptions
func (o *OrderOptions) WithStartWorkflowOptions(options client.StartWorkflowOptions) *OrderOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *OrderOptions) WithExecutionTimeout(d time.Duration) *OrderOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the ID value
func (o *OrderOptions) WithID(id string) *OrderOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *OrderOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *OrderOptions {
	o.idReusePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *OrderOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *OrderOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *OrderOptions) WithRunTimeout(d time.Duration) *OrderOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *OrderOptions) WithSearchAttributes(sa map[string]any) *OrderOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *OrderOptions) WithTaskTimeout(d time.Duration) *OrderOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *OrderOptions) WithTaskQueue(tq string) *OrderOptions {
	o.taskQueue = &tq
	return o
}

// OrderRun describes a(n) order.v1.Order workflow run
type OrderRun interface {
	// ID returns the workflow ID
	ID() string

	// RunID returns the workflow instance ID
	RunID() string

	// Run returns the inner client.WorkflowRun
	Run() client.WorkflowRun

	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) (*CreateOrderResult, error)

	// Cancel requests cancellation of a workflow in execution, returning an error if applicable
	Cancel(ctx context.Context) error

	// Terminate terminates a workflow in execution, returning an error if applicable
	Terminate(ctx context.Context, reason string, details ...interface{}) error

	// returns information about the order
	GetStatus(ctx context.Context) (*GetOrderResult, error)

	// process a customer action
	CustomerAction(ctx context.Context, req *CustomerActionInput) error

	// notify the requestor of an update to a shipment's status.
	ShipmentStatusUpdated(ctx context.Context, req *v1.UpdateShipmentStatusInput) error

	// updates the order status in the database
	UpdateOrderStatus(ctx context.Context, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) error

	// updates the order status in the database
	UpdateOrderStatusAsync(ctx context.Context, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) (UpdateOrderStatusHandle, error)
}

// orderRun provides an internal implementation of a(n) OrderRunRun
type orderRun struct {
	client *workerClient
	run    client.WorkflowRun
}

// ID returns the workflow ID
func (r *orderRun) ID() string {
	return r.run.GetID()
}

// Run returns the inner client.WorkflowRun
func (r *orderRun) Run() client.WorkflowRun {
	return r.run
}

// RunID returns the execution ID
func (r *orderRun) RunID() string {
	return r.run.GetRunID()
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *orderRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get blocks until the workflow is complete, returning the result if applicable
func (r *orderRun) Get(ctx context.Context) (*CreateOrderResult, error) {
	var resp CreateOrderResult
	if err := r.run.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *orderRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// returns information about the order
func (r *orderRun) GetStatus(ctx context.Context) (*GetOrderResult, error) {
	return r.client.GetStatus(ctx, r.ID(), "")
}

// process a customer action
func (r *orderRun) CustomerAction(ctx context.Context, req *CustomerActionInput) error {
	return r.client.CustomerAction(ctx, r.ID(), "", req)
}

// notify the requestor of an update to a shipment's status.
func (r *orderRun) ShipmentStatusUpdated(ctx context.Context, req *v1.UpdateShipmentStatusInput) error {
	return r.client.client.SignalWorkflow(ctx, r.ID(), r.RunID(), v1.ShipmentStatusUpdatedSignalName, req)
}

// updates the order status in the database
func (r *orderRun) UpdateOrderStatus(ctx context.Context, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) error {
	return r.client.UpdateOrderStatus(ctx, r.ID(), r.RunID(), req, opts...)
}

// updates the order status in the database
func (r *orderRun) UpdateOrderStatusAsync(ctx context.Context, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) (UpdateOrderStatusHandle, error) {
	return r.client.UpdateOrderStatusAsync(ctx, r.ID(), r.RunID(), req, opts...)
}

// UpdateOrderStatusHandle describes a(n) order.v1.UpdateOrderStatus update handle
type UpdateOrderStatusHandle interface {
	// WorkflowID returns the workflow ID
	WorkflowID() string
	// RunID returns the workflow instance ID
	RunID() string
	// UpdateID returns the update ID
	UpdateID() string
	// Get blocks until the workflow is complete and returns the result
	Get(ctx context.Context) error
}

// updateOrderStatusHandle provides an internal implementation of a(n) UpdateOrderStatusHandle
type updateOrderStatusHandle struct {
	client *workerClient
	handle client.WorkflowUpdateHandle
}

// WorkflowID returns the workflow ID
func (h *updateOrderStatusHandle) WorkflowID() string {
	return h.handle.WorkflowID()
}

// RunID returns the execution ID
func (h *updateOrderStatusHandle) RunID() string {
	return h.handle.RunID()
}

// UpdateID returns the update ID
func (h *updateOrderStatusHandle) UpdateID() string {
	return h.handle.UpdateID()
}

// Get blocks until the update wait policy is met, returning the result if applicable
func (h *updateOrderStatusHandle) Get(ctx context.Context) error {
	var err error
	doneCh := make(chan struct{})
	gctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	go func() {
		for {
			var deadlineExceeded *serviceerror.DeadlineExceeded
			if err = h.handle.Get(gctx, nil); err != nil && ctx.Err() == nil && (errors.As(err, &deadlineExceeded) || strings.Contains(err.Error(), context.DeadlineExceeded.Error())) {
				continue
			}
			break
		}
		close(doneCh)
	}()

	select {
	case <-ctx.Done():
		return ctx.Err()
	case <-doneCh:
		return err
	}
}

// UpdateOrderStatusOptions provides configuration for a order.v1.UpdateOrderStatus update operation
type UpdateOrderStatusOptions struct {
	Options    *client.UpdateWorkflowOptions
	id         *string
	waitPolicy client.WorkflowUpdateStage
}

// NewUpdateOrderStatusOptions initializes a new UpdateOrderStatusOptions value
func NewUpdateOrderStatusOptions() *UpdateOrderStatusOptions {
	return &UpdateOrderStatusOptions{Options: &client.UpdateWorkflowOptions{}}
}

// Build initializes a new client.UpdateWorkflowOptions with defaults and overrides applied
func (o *UpdateOrderStatusOptions) Build(workflowID string, runID string, req *UpdateOrderStatusInput) (opts *client.UpdateWorkflowOptions, err error) {
	// use user-provided UpdateWorkflowOptions if exists
	if o.Options != nil {
		opts = o.Options
	} else {
		opts = &client.UpdateWorkflowOptions{}
	}

	// set constants
	opts.Args = []any{req}
	opts.RunID = runID
	opts.UpdateName = UpdateOrderStatusUpdateName
	opts.WorkflowID = workflowID

	// set UpdateID
	if v := o.id; v != nil {
		opts.UpdateID = *v
	}

	// set WaitPolicy
	if v := o.waitPolicy; v != client.WorkflowUpdateStageUnspecified {
		opts.WaitForStage = v
	} else if opts.WaitForStage == client.WorkflowUpdateStageUnspecified {
		opts.WaitForStage = client.WorkflowUpdateStageCompleted
	}
	return opts, nil
}

// WithUpdateID sets the UpdateID
func (o *UpdateOrderStatusOptions) WithUpdateID(id string) *UpdateOrderStatusOptions {
	o.id = &id
	return o
}

// WithUpdateWorkflowOptions sets the initial client.UpdateWorkflowOptions
func (o *UpdateOrderStatusOptions) WithUpdateWorkflowOptions(options client.UpdateWorkflowOptions) *UpdateOrderStatusOptions {
	o.Options = &options
	return o
}

// WithWaitPolicy sets the WaitPolicy
func (o *UpdateOrderStatusOptions) WithWaitPolicy(policy client.WorkflowUpdateStage) *UpdateOrderStatusOptions {
	o.waitPolicy = policy
	return o
}

// Reference to generated workflow functions
var (
	// manage the lifecycle of an order
	OrderFunction func(workflow.Context, *CreateOrderInput) (*CreateOrderResult, error)
)

// WorkerWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
type (
	// WorkerWorkflowFunctions describes a mockable dependency for inlining workflows within other workflows
	WorkerWorkflowFunctions interface {
		// manage the lifecycle of an order
		Order(workflow.Context, *CreateOrderInput) (*CreateOrderResult, error)
	}
	// workerWorkflowFunctions provides an internal WorkerWorkflowFunctions implementation
	workerWorkflowFunctions struct{}
)

func NewWorkerWorkflowFunctions() WorkerWorkflowFunctions {
	return &workerWorkflowFunctions{}
}

// manage the lifecycle of an order
func (f *workerWorkflowFunctions) Order(ctx workflow.Context, req *CreateOrderInput) (*CreateOrderResult, error) {
	if OrderFunction == nil {
		return nil, errors.New("Order requires workflow registration via RegisterWorkerWorkflows or RegisterOrderWorkflow")
	}
	return OrderFunction(ctx, req)
}

// WorkerWorkflows provides methods for initializing new oms.order.v1.Worker workflow values
type WorkerWorkflows interface {
	// manage the lifecycle of an order
	Order(ctx workflow.Context, input *OrderWorkflowInput) (OrderWorkflow, error)
}

// RegisterWorkerWorkflows registers oms.order.v1.Worker workflows with the given worker
func RegisterWorkerWorkflows(r worker.WorkflowRegistry, workflows WorkerWorkflows) {
	RegisterOrderWorkflow(r, workflows.Order)
}

// RegisterOrderWorkflow registers a oms.order.v1.Worker.Order workflow with the given worker
func RegisterOrderWorkflow(r worker.WorkflowRegistry, wf func(workflow.Context, *OrderWorkflowInput) (OrderWorkflow, error)) {
	OrderFunction = buildOrder(wf)
	r.RegisterWorkflowWithOptions(OrderFunction, workflow.RegisterOptions{Name: OrderWorkflowName})
}

// buildOrder converts a Order workflow struct into a valid workflow function
func buildOrder(ctor func(workflow.Context, *OrderWorkflowInput) (OrderWorkflow, error)) func(workflow.Context, *CreateOrderInput) (*CreateOrderResult, error) {
	return func(ctx workflow.Context, req *CreateOrderInput) (*CreateOrderResult, error) {
		input := &OrderWorkflowInput{
			Req: req,
			CustomerAction: &CustomerActionSignal{
				Channel: workflow.GetSignalChannel(ctx, CustomerActionSignalName),
			},
			ShipmentStatusUpdated: &v1.ShipmentStatusUpdatedSignal{
				Channel: workflow.GetSignalChannel(ctx, v1.ShipmentStatusUpdatedSignalName),
			},
		}
		wf, err := ctor(ctx, input)
		if err != nil {
			return nil, err
		}
		if initializable, ok := wf.(helpers.Initializable); ok {
			if err := initializable.Initialize(ctx); err != nil {
				return nil, err
			}
		}
		if err := workflow.SetQueryHandler(ctx, GetStatusQueryName, wf.GetStatus); err != nil {
			return nil, err
		}
		{
			opts := workflow.UpdateHandlerOptions{}
			if err := workflow.SetUpdateHandlerWithOptions(ctx, UpdateOrderStatusUpdateName, wf.UpdateOrderStatus, opts); err != nil {
				return nil, err
			}
		}
		return wf.Execute(ctx)
	}
}

// OrderWorkflowInput describes the input to a(n) order.v1.Order workflow constructor
type OrderWorkflowInput struct {
	Req                   *CreateOrderInput
	CustomerAction        *CustomerActionSignal
	ShipmentStatusUpdated *v1.ShipmentStatusUpdatedSignal
}

// manage the lifecycle of an order
//
// workflow details: (name: "order.v1.Order", id: "Order:${! id.or(throw("id required")) }")
type OrderWorkflow interface {
	// Execute defines the entrypoint to a(n) order.v1.Order workflow
	Execute(ctx workflow.Context) (*CreateOrderResult, error)

	// returns information about the order
	GetStatus() (*GetOrderResult, error)

	// updates the order status in the database
	UpdateOrderStatus(workflow.Context, *UpdateOrderStatusInput) error
}

// manage the lifecycle of an order
func OrderChild(ctx workflow.Context, req *CreateOrderInput, options ...*OrderChildOptions) (*CreateOrderResult, error) {
	childRun, err := OrderChildAsync(ctx, req, options...)
	if err != nil {
		return nil, err
	}
	return childRun.Get(ctx)
}

// manage the lifecycle of an order
func OrderChildAsync(ctx workflow.Context, req *CreateOrderInput, options ...*OrderChildOptions) (*OrderChildRun, error) {
	var o *OrderChildOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewOrderChildOptions()
	}
	opts, err := o.Build(ctx, req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing workflow.ChildWorkflowOptions: %w", err)
	}
	ctx = workflow.WithChildOptions(ctx, opts)
	return &OrderChildRun{Future: workflow.ExecuteChildWorkflow(ctx, OrderWorkflowName, req)}, nil
}

// OrderChildOptions provides configuration for a child order.v1.Order workflow operation
type OrderChildOptions struct {
	options             workflow.ChildWorkflowOptions
	executionTimeout    *time.Duration
	id                  *string
	idReusePolicy       enumsv1.WorkflowIdReusePolicy
	retryPolicy         *temporal.RetryPolicy
	runTimeout          *time.Duration
	searchAttributes    map[string]any
	taskQueue           *string
	taskTimeout         *time.Duration
	parentClosePolicy   enumsv1.ParentClosePolicy
	waitForCancellation *bool
}

// NewOrderChildOptions initializes a new OrderChildOptions value
func NewOrderChildOptions() *OrderChildOptions {
	return &OrderChildOptions{}
}

// Build initializes a new go.temporal.io/sdk/workflow.ChildWorkflowOptions value with defaults and overrides applied
func (o *OrderChildOptions) Build(ctx workflow.Context, req protoreflect.Message) (workflow.ChildWorkflowOptions, error) {
	opts := o.options
	if v := o.id; v != nil {
		opts.WorkflowID = *v
	} else if opts.WorkflowID == "" {
		// wrap expression evaluation in local activity
		// more info: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/patches#pv_64-expression-evaluation-local-activity
		if workflow.GetVersion(ctx, "cludden_protoc-gen-go-temporal_64_expression-evaluation-local-activity", workflow.DefaultVersion, 1) == 1 {
			lao := workflow.GetLocalActivityOptions(ctx)
			lao.ScheduleToCloseTimeout = time.Second * 10
			if err := workflow.ExecuteLocalActivity(workflow.WithLocalActivityOptions(ctx, lao), func(ctx context.Context) (string, error) {
				id, err := expression.EvalExpression(OrderIdexpression, req)
				if err != nil {
					return "", fmt.Errorf("error evaluating id expression for %q workflow: %w", OrderWorkflowName, err)
				}
				return id, nil
			}).Get(ctx, &opts.WorkflowID); err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", OrderWorkflowName, err)
			}
		} else {
			id, err := expression.EvalExpression(OrderIdexpression, req)
			if err != nil {
				return opts, fmt.Errorf("error evaluating id expression for %q workflow: %w", OrderWorkflowName, err)
			}
			opts.WorkflowID = id
		}
	}
	if v := o.idReusePolicy; v != enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = v
	} else if opts.WorkflowIDReusePolicy == enumsv1.WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED {
		opts.WorkflowIDReusePolicy = enumsv1.WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.searchAttributes; v != nil {
		opts.SearchAttributes = o.searchAttributes
	} else if opts.SearchAttributes == nil {
		// wrap expression evaluation in local activity
		// more info: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/patches#pv_64-expression-evaluation-local-activity
		if workflow.GetVersion(ctx, "cludden_protoc-gen-go-temporal_64_expression-evaluation-local-activity", workflow.DefaultVersion, 1) == 1 {
			lao := workflow.GetLocalActivityOptions(ctx)
			lao.ScheduleToCloseTimeout = time.Second * 10
			if err := workflow.ExecuteLocalActivity(workflow.WithLocalActivityOptions(ctx, lao), func(ctx context.Context) (map[string]any, error) {
				structured, err := expression.ToStructured(req)
				if err != nil {
					return nil, fmt.Errorf("error serializing input for \"Order\" search attribute mapping: %v", err)
				}
				result, err := OrderSearchAttributesMapping.Query(structured)
				if err != nil {
					return nil, fmt.Errorf("error executing \"Order\" search attribute mapping: %v", err)
				}
				searchAttributes, ok := result.(map[string]any)
				if !ok {
					return nil, fmt.Errorf("expected \"Order\" search attribute mapping to return map[string]any, got: %T", result)
				}
				return searchAttributes, nil
			}).Get(ctx, &opts.SearchAttributes); err != nil {
				return opts, fmt.Errorf("error evaluating search attributes for %q workflow: %w", OrderWorkflowName, err)
			}
		} else {
			structured, err := expression.ToStructured(req)
			if err != nil {
				return opts, fmt.Errorf("error serializing input for \"Order\" search attribute mapping: %v", err)
			}
			result, err := OrderSearchAttributesMapping.Query(structured)
			if err != nil {
				return opts, fmt.Errorf("error executing \"Order\" search attribute mapping: %v", err)
			}
			searchAttributes, ok := result.(map[string]any)
			if !ok {
				return opts, fmt.Errorf("expected \"Order\" search attribute mapping to return map[string]any, got: %T", result)
			}
			opts.SearchAttributes = searchAttributes
		}
	}
	if v := o.executionTimeout; v != nil {
		opts.WorkflowExecutionTimeout = *v
	}
	if v := o.runTimeout; v != nil {
		opts.WorkflowRunTimeout = *v
	}
	if v := o.taskTimeout; v != nil {
		opts.WorkflowTaskTimeout = *v
	}
	if v := o.parentClosePolicy; v != enumsv1.PARENT_CLOSE_POLICY_UNSPECIFIED {
		opts.ParentClosePolicy = v
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return opts, nil
}

// WithChildWorkflowOptions sets the initial go.temporal.io/sdk/workflow.ChildWorkflowOptions
func (o *OrderChildOptions) WithChildWorkflowOptions(options workflow.ChildWorkflowOptions) *OrderChildOptions {
	o.options = options
	return o
}

// WithExecutionTimeout sets the WorkflowExecutionTimeout value
func (o *OrderChildOptions) WithExecutionTimeout(d time.Duration) *OrderChildOptions {
	o.executionTimeout = &d
	return o
}

// WithID sets the WorkflowID value
func (o *OrderChildOptions) WithID(id string) *OrderChildOptions {
	o.id = &id
	return o
}

// WithIDReusePolicy sets the WorkflowIDReusePolicy value
func (o *OrderChildOptions) WithIDReusePolicy(policy enumsv1.WorkflowIdReusePolicy) *OrderChildOptions {
	o.idReusePolicy = policy
	return o
}

// WithParentClosePolicy sets the WorkflowIDReusePolicy value
func (o *OrderChildOptions) WithParentClosePolicy(policy enumsv1.ParentClosePolicy) *OrderChildOptions {
	o.parentClosePolicy = policy
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *OrderChildOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *OrderChildOptions {
	o.retryPolicy = policy
	return o
}

// WithRunTimeout sets the WorkflowRunTimeout value
func (o *OrderChildOptions) WithRunTimeout(d time.Duration) *OrderChildOptions {
	o.runTimeout = &d
	return o
}

// WithSearchAttributes sets the SearchAttributes value
func (o *OrderChildOptions) WithSearchAttributes(sa map[string]any) *OrderChildOptions {
	o.searchAttributes = sa
	return o
}

// WithTaskTimeout sets the WorkflowTaskTimeout value
func (o *OrderChildOptions) WithTaskTimeout(d time.Duration) *OrderChildOptions {
	o.taskTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *OrderChildOptions) WithTaskQueue(tq string) *OrderChildOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *OrderChildOptions) WithWaitForCancellation(wait bool) *OrderChildOptions {
	o.waitForCancellation = &wait
	return o
}

// OrderChildRun describes a child Order workflow run
type OrderChildRun struct {
	Future workflow.ChildWorkflowFuture
}

// Get blocks until the workflow is completed, returning the response value
func (r *OrderChildRun) Get(ctx workflow.Context) (*CreateOrderResult, error) {
	var resp CreateOrderResult
	if err := r.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds this completion to the selector. Callback can be nil.
func (r *OrderChildRun) Select(sel workflow.Selector, fn func(*OrderChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future, func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// SelectStart adds waiting for start to the selector. Callback can be nil.
func (r *OrderChildRun) SelectStart(sel workflow.Selector, fn func(*OrderChildRun)) workflow.Selector {
	return sel.AddFuture(r.Future.GetChildWorkflowExecution(), func(workflow.Future) {
		if fn != nil {
			fn(r)
		}
	})
}

// WaitStart waits for the child workflow to start
func (r *OrderChildRun) WaitStart(ctx workflow.Context) (*workflow.Execution, error) {
	var exec workflow.Execution
	if err := r.Future.GetChildWorkflowExecution().Get(ctx, &exec); err != nil {
		return nil, err
	}
	return &exec, nil
}

// CustomerAction sends a(n) "order.v1.CustomerAction" signal request to the child workflow
func (r *OrderChildRun) CustomerAction(ctx workflow.Context, input *CustomerActionInput) error {
	return r.CustomerActionAsync(ctx, input).Get(ctx, nil)
}

// CustomerActionAsync sends a(n) "order.v1.CustomerAction" signal request to the child workflow
func (r *OrderChildRun) CustomerActionAsync(ctx workflow.Context, input *CustomerActionInput) workflow.Future {
	return r.Future.SignalChildWorkflow(ctx, CustomerActionSignalName, input)
}

// ShipmentStatusUpdated sends a(n) "shipment.v1.ShipmentStatusUpdated" signal request to the child workflow
func (r *OrderChildRun) ShipmentStatusUpdated(ctx workflow.Context, input *v1.UpdateShipmentStatusInput) error {
	return r.ShipmentStatusUpdatedAsync(ctx, input).Get(ctx, nil)
}

// ShipmentStatusUpdatedAsync sends a(n) "shipment.v1.ShipmentStatusUpdated" signal request to the child workflow
func (r *OrderChildRun) ShipmentStatusUpdatedAsync(ctx workflow.Context, input *v1.UpdateShipmentStatusInput) workflow.Future {
	return r.Future.SignalChildWorkflow(ctx, v1.ShipmentStatusUpdatedSignalName, input)
}

// CustomerActionSignal describes a(n) oms.order.v1.Worker.CustomerAction signal
type CustomerActionSignal struct {
	Channel workflow.ReceiveChannel
}

// NewCustomerActionSignal initializes a new order.v1.CustomerAction signal wrapper
func NewCustomerActionSignal(ctx workflow.Context) *CustomerActionSignal {
	return &CustomerActionSignal{Channel: workflow.GetSignalChannel(ctx, CustomerActionSignalName)}
}

// Receive blocks until a(n) oms.order.v1.Worker.CustomerAction signal is received
func (s *CustomerActionSignal) Receive(ctx workflow.Context) (*CustomerActionInput, bool) {
	var resp CustomerActionInput
	more := s.Channel.Receive(ctx, &resp)
	return &resp, more
}

// ReceiveAsync checks for a oms.order.v1.Worker.CustomerAction signal without blocking
func (s *CustomerActionSignal) ReceiveAsync() *CustomerActionInput {
	var resp CustomerActionInput
	if ok := s.Channel.ReceiveAsync(&resp); !ok {
		return nil
	}
	return &resp
}

// ReceiveWithTimeout blocks until a(n) oms.order.v1.Worker.CustomerAction signal is received or timeout expires.
// Returns more value of false when Channel is closed.
// Returns ok value of false when no value was found in the channel for the duration of timeout or the ctx was canceled.
// resp will be nil if ok is false.
func (s *CustomerActionSignal) ReceiveWithTimeout(ctx workflow.Context, timeout time.Duration) (resp *CustomerActionInput, ok bool, more bool) {
	resp = &CustomerActionInput{}
	if ok, more = s.Channel.ReceiveWithTimeout(ctx, timeout, &resp); !ok {
		return nil, false, more
	}
	return
}

// Select checks for a(n) oms.order.v1.Worker.CustomerAction signal without blocking
func (s *CustomerActionSignal) Select(sel workflow.Selector, fn func(*CustomerActionInput)) workflow.Selector {
	return sel.AddReceive(s.Channel, func(workflow.ReceiveChannel, bool) {
		req := s.ReceiveAsync()
		if fn != nil {
			fn(req)
		}
	})
}

// process a customer action
func CustomerActionExternal(ctx workflow.Context, workflowID string, runID string, req *CustomerActionInput) error {
	return CustomerActionExternalAsync(ctx, workflowID, runID, req).Get(ctx, nil)
}

// process a customer action
func CustomerActionExternalAsync(ctx workflow.Context, workflowID string, runID string, req *CustomerActionInput) workflow.Future {
	return workflow.SignalExternalWorkflow(ctx, workflowID, runID, CustomerActionSignalName, req)
}

// WorkerActivities describes available worker activities
type WorkerActivities interface {
	// initialize a new order
	CreateOrder(ctx context.Context, req *CreateOrderInput) (*CreateOrderResult, error)

	// reserves items to satisfy an order and returns a list of reservations for the items
	// Any unavailable items will be returned in a Reservation with Available set to false.
	// In a real system this would involve an inventory database of some kind.
	// For our purposes we just split orders arbitrarily.
	ReserveItems(ctx context.Context, req *ReserveItemsInput) (*ReserveItemsResult, error)

	// updates the order status in the database
	UpdateOrderStatus(ctx context.Context, req *UpdateOrderStatusInput) error
}

// RegisterWorkerActivities registers activities with a worker
func RegisterWorkerActivities(r worker.ActivityRegistry, activities WorkerActivities) {
	RegisterCreateOrderActivity(r, activities.CreateOrder)
	RegisterReserveItemsActivity(r, activities.ReserveItems)
	RegisterUpdateOrderStatusActivity(r, activities.UpdateOrderStatus)
}

// RegisterCreateOrderActivity registers a order.v1.CreateOrder activity
func RegisterCreateOrderActivity(r worker.ActivityRegistry, fn func(context.Context, *CreateOrderInput) (*CreateOrderResult, error)) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: CreateOrderActivityName,
	})
}

// CreateOrderFuture describes a(n) order.v1.CreateOrder activity execution
type CreateOrderFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *CreateOrderFuture) Get(ctx workflow.Context) (*CreateOrderResult, error) {
	var resp CreateOrderResult
	if err := f.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *CreateOrderFuture) Select(sel workflow.Selector, fn func(*CreateOrderFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// initialize a new order
func CreateOrder(ctx workflow.Context, req *CreateOrderInput, options ...*CreateOrderActivityOptions) (*CreateOrderResult, error) {
	return CreateOrderAsync(ctx, req, options...).Get(ctx)
}

// initialize a new order
func CreateOrderAsync(ctx workflow.Context, req *CreateOrderInput, options ...*CreateOrderActivityOptions) *CreateOrderFuture {
	var o *CreateOrderActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateOrderActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &CreateOrderFuture{Future: errF}
	}
	activity := CreateOrderActivityName
	future := &CreateOrderFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// initialize a new order
func CreateOrderLocal(ctx workflow.Context, req *CreateOrderInput, options ...*CreateOrderLocalActivityOptions) (*CreateOrderResult, error) {
	return CreateOrderLocalAsync(ctx, req, options...).Get(ctx)
}

// initialize a new order
func CreateOrderLocalAsync(ctx workflow.Context, req *CreateOrderInput, options ...*CreateOrderLocalActivityOptions) *CreateOrderFuture {
	var o *CreateOrderLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewCreateOrderLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &CreateOrderFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = CreateOrderActivityName
	}
	future := &CreateOrderFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// CreateOrderActivityOptions provides configuration for a(n) order.v1.CreateOrder activity
type CreateOrderActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewCreateOrderActivityOptions initializes a new CreateOrderActivityOptions value
func NewCreateOrderActivityOptions() *CreateOrderActivityOptions {
	return &CreateOrderActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *CreateOrderActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	} else if opts.ScheduleToCloseTimeout == 0 {
		opts.ScheduleToCloseTimeout = 5000000000 // 5 seconds
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *CreateOrderActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *CreateOrderActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *CreateOrderActivityOptions) WithHeartbeatTimeout(d time.Duration) *CreateOrderActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateOrderActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateOrderActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *CreateOrderActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *CreateOrderActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *CreateOrderActivityOptions) WithScheduleToStartTimeout(d time.Duration) *CreateOrderActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *CreateOrderActivityOptions) WithStartToCloseTimeout(d time.Duration) *CreateOrderActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *CreateOrderActivityOptions) WithTaskQueue(tq string) *CreateOrderActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *CreateOrderActivityOptions) WithWaitForCancellation(wait bool) *CreateOrderActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// CreateOrderLocalActivityOptions provides configuration for a(n) order.v1.CreateOrder activity
type CreateOrderLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *CreateOrderInput) (*CreateOrderResult, error)
}

// NewCreateOrderLocalActivityOptions initializes a new CreateOrderLocalActivityOptions value
func NewCreateOrderLocalActivityOptions() *CreateOrderLocalActivityOptions {
	return &CreateOrderLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *CreateOrderLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	} else if opts.ScheduleToCloseTimeout == 0 {
		opts.ScheduleToCloseTimeout = 5000000000 // 5 seconds
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom order.v1.CreateOrder implementation
func (o *CreateOrderLocalActivityOptions) Local(fn func(context.Context, *CreateOrderInput) (*CreateOrderResult, error)) *CreateOrderLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *CreateOrderLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *CreateOrderLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *CreateOrderLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *CreateOrderLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *CreateOrderLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *CreateOrderLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *CreateOrderLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *CreateOrderLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// RegisterReserveItemsActivity registers a order.v1.ReserveItems activity
func RegisterReserveItemsActivity(r worker.ActivityRegistry, fn func(context.Context, *ReserveItemsInput) (*ReserveItemsResult, error)) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: ReserveItemsActivityName,
	})
}

// ReserveItemsFuture describes a(n) order.v1.ReserveItems activity execution
type ReserveItemsFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *ReserveItemsFuture) Get(ctx workflow.Context) (*ReserveItemsResult, error) {
	var resp ReserveItemsResult
	if err := f.Future.Get(ctx, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *ReserveItemsFuture) Select(sel workflow.Selector, fn func(*ReserveItemsFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// reserves items to satisfy an order and returns a list of reservations for the items
// Any unavailable items will be returned in a Reservation with Available set to false.
// In a real system this would involve an inventory database of some kind.
// For our purposes we just split orders arbitrarily.
func ReserveItems(ctx workflow.Context, req *ReserveItemsInput, options ...*ReserveItemsActivityOptions) (*ReserveItemsResult, error) {
	return ReserveItemsAsync(ctx, req, options...).Get(ctx)
}

// reserves items to satisfy an order and returns a list of reservations for the items
// Any unavailable items will be returned in a Reservation with Available set to false.
// In a real system this would involve an inventory database of some kind.
// For our purposes we just split orders arbitrarily.
func ReserveItemsAsync(ctx workflow.Context, req *ReserveItemsInput, options ...*ReserveItemsActivityOptions) *ReserveItemsFuture {
	var o *ReserveItemsActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewReserveItemsActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &ReserveItemsFuture{Future: errF}
	}
	activity := ReserveItemsActivityName
	future := &ReserveItemsFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// reserves items to satisfy an order and returns a list of reservations for the items
// Any unavailable items will be returned in a Reservation with Available set to false.
// In a real system this would involve an inventory database of some kind.
// For our purposes we just split orders arbitrarily.
func ReserveItemsLocal(ctx workflow.Context, req *ReserveItemsInput, options ...*ReserveItemsLocalActivityOptions) (*ReserveItemsResult, error) {
	return ReserveItemsLocalAsync(ctx, req, options...).Get(ctx)
}

// reserves items to satisfy an order and returns a list of reservations for the items
// Any unavailable items will be returned in a Reservation with Available set to false.
// In a real system this would involve an inventory database of some kind.
// For our purposes we just split orders arbitrarily.
func ReserveItemsLocalAsync(ctx workflow.Context, req *ReserveItemsInput, options ...*ReserveItemsLocalActivityOptions) *ReserveItemsFuture {
	var o *ReserveItemsLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewReserveItemsLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &ReserveItemsFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = ReserveItemsActivityName
	}
	future := &ReserveItemsFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// ReserveItemsActivityOptions provides configuration for a(n) order.v1.ReserveItems activity
type ReserveItemsActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewReserveItemsActivityOptions initializes a new ReserveItemsActivityOptions value
func NewReserveItemsActivityOptions() *ReserveItemsActivityOptions {
	return &ReserveItemsActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *ReserveItemsActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	} else if opts.ScheduleToCloseTimeout == 0 {
		opts.ScheduleToCloseTimeout = 5000000000 // 5 seconds
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *ReserveItemsActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *ReserveItemsActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *ReserveItemsActivityOptions) WithHeartbeatTimeout(d time.Duration) *ReserveItemsActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *ReserveItemsActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *ReserveItemsActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *ReserveItemsActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *ReserveItemsActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *ReserveItemsActivityOptions) WithScheduleToStartTimeout(d time.Duration) *ReserveItemsActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *ReserveItemsActivityOptions) WithStartToCloseTimeout(d time.Duration) *ReserveItemsActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *ReserveItemsActivityOptions) WithTaskQueue(tq string) *ReserveItemsActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *ReserveItemsActivityOptions) WithWaitForCancellation(wait bool) *ReserveItemsActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// ReserveItemsLocalActivityOptions provides configuration for a(n) order.v1.ReserveItems activity
type ReserveItemsLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *ReserveItemsInput) (*ReserveItemsResult, error)
}

// NewReserveItemsLocalActivityOptions initializes a new ReserveItemsLocalActivityOptions value
func NewReserveItemsLocalActivityOptions() *ReserveItemsLocalActivityOptions {
	return &ReserveItemsLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *ReserveItemsLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	} else if opts.ScheduleToCloseTimeout == 0 {
		opts.ScheduleToCloseTimeout = 5000000000 // 5 seconds
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom order.v1.ReserveItems implementation
func (o *ReserveItemsLocalActivityOptions) Local(fn func(context.Context, *ReserveItemsInput) (*ReserveItemsResult, error)) *ReserveItemsLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *ReserveItemsLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *ReserveItemsLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *ReserveItemsLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *ReserveItemsLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *ReserveItemsLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *ReserveItemsLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *ReserveItemsLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *ReserveItemsLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// RegisterUpdateOrderStatusActivity registers a order.v1.UpdateOrderStatus activity
func RegisterUpdateOrderStatusActivity(r worker.ActivityRegistry, fn func(context.Context, *UpdateOrderStatusInput) error) {
	r.RegisterActivityWithOptions(fn, activity.RegisterOptions{
		Name: UpdateOrderStatusActivityName,
	})
}

// UpdateOrderStatusFuture describes a(n) order.v1.UpdateOrderStatus activity execution
type UpdateOrderStatusFuture struct {
	Future workflow.Future
}

// Get blocks on the activity's completion, returning the response
func (f *UpdateOrderStatusFuture) Get(ctx workflow.Context) error {
	return f.Future.Get(ctx, nil)
}

// Select adds the activity's completion to the selector, callback can be nil
func (f *UpdateOrderStatusFuture) Select(sel workflow.Selector, fn func(*UpdateOrderStatusFuture)) workflow.Selector {
	return sel.AddFuture(f.Future, func(workflow.Future) {
		if fn != nil {
			fn(f)
		}
	})
}

// updates the order status in the database
func UpdateOrderStatus(ctx workflow.Context, req *UpdateOrderStatusInput, options ...*UpdateOrderStatusActivityOptions) error {
	return UpdateOrderStatusAsync(ctx, req, options...).Get(ctx)
}

// updates the order status in the database
func UpdateOrderStatusAsync(ctx workflow.Context, req *UpdateOrderStatusInput, options ...*UpdateOrderStatusActivityOptions) *UpdateOrderStatusFuture {
	var o *UpdateOrderStatusActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewUpdateOrderStatusActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &UpdateOrderStatusFuture{Future: errF}
	}
	activity := UpdateOrderStatusActivityName
	future := &UpdateOrderStatusFuture{Future: workflow.ExecuteActivity(ctx, activity, req)}
	return future
}

// updates the order status in the database
func UpdateOrderStatusLocal(ctx workflow.Context, req *UpdateOrderStatusInput, options ...*UpdateOrderStatusLocalActivityOptions) error {
	return UpdateOrderStatusLocalAsync(ctx, req, options...).Get(ctx)
}

// updates the order status in the database
func UpdateOrderStatusLocalAsync(ctx workflow.Context, req *UpdateOrderStatusInput, options ...*UpdateOrderStatusLocalActivityOptions) *UpdateOrderStatusFuture {
	var o *UpdateOrderStatusLocalActivityOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewUpdateOrderStatusLocalActivityOptions()
	}
	var err error
	if ctx, err = o.Build(ctx); err != nil {
		errF, errS := workflow.NewFuture(ctx)
		errS.SetError(err)
		return &UpdateOrderStatusFuture{Future: errF}
	}
	var activity any
	if o.fn != nil {
		activity = o.fn
	} else {
		activity = UpdateOrderStatusActivityName
	}
	future := &UpdateOrderStatusFuture{Future: workflow.ExecuteLocalActivity(ctx, activity, req)}
	return future
}

// UpdateOrderStatusActivityOptions provides configuration for a(n) order.v1.UpdateOrderStatus activity
type UpdateOrderStatusActivityOptions struct {
	options                workflow.ActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	heartbeatTimeout       *time.Duration
	scheduleToStartTimeout *time.Duration
	taskQueue              *string
	waitForCancellation    *bool
}

// NewUpdateOrderStatusActivityOptions initializes a new UpdateOrderStatusActivityOptions value
func NewUpdateOrderStatusActivityOptions() *UpdateOrderStatusActivityOptions {
	return &UpdateOrderStatusActivityOptions{}
}

// Build initializes a workflow.Context with appropriate ActivityOptions values derived from schema defaults and any user-defined overrides
func (o *UpdateOrderStatusActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.heartbeatTimeout; v != nil {
		opts.HeartbeatTimeout = *v
	}
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.scheduleToStartTimeout; v != nil {
		opts.ScheduleToStartTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 30000000000 // 30 seconds
	}
	if v := o.taskQueue; v != nil {
		opts.TaskQueue = *v
	} else if opts.TaskQueue == "" {
		opts.TaskQueue = WorkerTaskQueue
	}
	if v := o.waitForCancellation; v != nil {
		opts.WaitForCancellation = *v
	}
	return workflow.WithActivityOptions(ctx, opts), nil
}

// WithActivityOptions specifies an initial ActivityOptions value to which defaults will be applied
func (o *UpdateOrderStatusActivityOptions) WithActivityOptions(options workflow.ActivityOptions) *UpdateOrderStatusActivityOptions {
	o.options = options
	return o
}

// WithHeartbeatTimeout sets the HeartbeatTimeout value
func (o *UpdateOrderStatusActivityOptions) WithHeartbeatTimeout(d time.Duration) *UpdateOrderStatusActivityOptions {
	o.heartbeatTimeout = &d
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *UpdateOrderStatusActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *UpdateOrderStatusActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *UpdateOrderStatusActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *UpdateOrderStatusActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithScheduleToStartTimeout sets the ScheduleToStartTimeout value
func (o *UpdateOrderStatusActivityOptions) WithScheduleToStartTimeout(d time.Duration) *UpdateOrderStatusActivityOptions {
	o.scheduleToStartTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *UpdateOrderStatusActivityOptions) WithStartToCloseTimeout(d time.Duration) *UpdateOrderStatusActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// WithTaskQueue sets the TaskQueue value
func (o *UpdateOrderStatusActivityOptions) WithTaskQueue(tq string) *UpdateOrderStatusActivityOptions {
	o.taskQueue = &tq
	return o
}

// WithWaitForCancellation sets the WaitForCancellation value
func (o *UpdateOrderStatusActivityOptions) WithWaitForCancellation(wait bool) *UpdateOrderStatusActivityOptions {
	o.waitForCancellation = &wait
	return o
}

// UpdateOrderStatusLocalActivityOptions provides configuration for a(n) order.v1.UpdateOrderStatus activity
type UpdateOrderStatusLocalActivityOptions struct {
	options                workflow.LocalActivityOptions
	retryPolicy            *temporal.RetryPolicy
	scheduleToCloseTimeout *time.Duration
	startToCloseTimeout    *time.Duration
	fn                     func(context.Context, *UpdateOrderStatusInput) error
}

// NewUpdateOrderStatusLocalActivityOptions initializes a new UpdateOrderStatusLocalActivityOptions value
func NewUpdateOrderStatusLocalActivityOptions() *UpdateOrderStatusLocalActivityOptions {
	return &UpdateOrderStatusLocalActivityOptions{}
}

// Build initializes a workflow.Context with appropriate LocalActivityOptions values derived from schema defaults and any user-defined overrides
func (o *UpdateOrderStatusLocalActivityOptions) Build(ctx workflow.Context) (workflow.Context, error) {
	opts := o.options
	if v := o.retryPolicy; v != nil {
		opts.RetryPolicy = v
	}
	if v := o.scheduleToCloseTimeout; v != nil {
		opts.ScheduleToCloseTimeout = *v
	}
	if v := o.startToCloseTimeout; v != nil {
		opts.StartToCloseTimeout = *v
	} else if opts.StartToCloseTimeout == 0 {
		opts.StartToCloseTimeout = 30000000000 // 30 seconds
	}
	return workflow.WithLocalActivityOptions(ctx, opts), nil
}

// Local specifies a custom order.v1.UpdateOrderStatus implementation
func (o *UpdateOrderStatusLocalActivityOptions) Local(fn func(context.Context, *UpdateOrderStatusInput) error) *UpdateOrderStatusLocalActivityOptions {
	o.fn = fn
	return o
}

// WithLocalActivityOptions specifies an initial LocalActivityOptions value to which defaults will be applied
func (o *UpdateOrderStatusLocalActivityOptions) WithLocalActivityOptions(options workflow.LocalActivityOptions) *UpdateOrderStatusLocalActivityOptions {
	o.options = options
	return o
}

// WithRetryPolicy sets the RetryPolicy value
func (o *UpdateOrderStatusLocalActivityOptions) WithRetryPolicy(policy *temporal.RetryPolicy) *UpdateOrderStatusLocalActivityOptions {
	o.retryPolicy = policy
	return o
}

// WithScheduleToCloseTimeout sets the ScheduleToCloseTimeout value
func (o *UpdateOrderStatusLocalActivityOptions) WithScheduleToCloseTimeout(d time.Duration) *UpdateOrderStatusLocalActivityOptions {
	o.scheduleToCloseTimeout = &d
	return o
}

// WithStartToCloseTimeout sets the StartToCloseTimeout value
func (o *UpdateOrderStatusLocalActivityOptions) WithStartToCloseTimeout(d time.Duration) *UpdateOrderStatusLocalActivityOptions {
	o.startToCloseTimeout = &d
	return o
}

// TestClient provides a testsuite-compatible Client
type TestWorkerClient struct {
	env       *testsuite.TestWorkflowEnvironment
	workflows WorkerWorkflows
}

var _ WorkerClient = &TestWorkerClient{}

// NewTestWorkerClient initializes a new TestWorkerClient value
func NewTestWorkerClient(env *testsuite.TestWorkflowEnvironment, workflows WorkerWorkflows, activities WorkerActivities) *TestWorkerClient {
	if workflows != nil {
		RegisterWorkerWorkflows(env, workflows)
	}
	if activities != nil {
		RegisterWorkerActivities(env, activities)
	}
	return &TestWorkerClient{env, workflows}
}

// Order executes a(n) order.v1.Order workflow in the test environment
func (c *TestWorkerClient) Order(ctx context.Context, req *CreateOrderInput, opts ...*OrderOptions) (*CreateOrderResult, error) {
	run, err := c.OrderAsync(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return run.Get(ctx)
}

// OrderAsync executes a(n) order.v1.Order workflow in the test environment
func (c *TestWorkerClient) OrderAsync(ctx context.Context, req *CreateOrderInput, options ...*OrderOptions) (OrderRun, error) {
	var o *OrderOptions
	if len(options) > 0 && options[0] != nil {
		o = options[0]
	} else {
		o = NewOrderOptions()
	}
	opts, err := o.Build(req.ProtoReflect())
	if err != nil {
		return nil, fmt.Errorf("error initializing client.StartWorkflowOptions: %w", err)
	}
	return &testOrderRun{client: c, env: c.env, opts: &opts, req: req, workflows: c.workflows}, nil
}

// GetOrder is a noop
func (c *TestWorkerClient) GetOrder(ctx context.Context, workflowID string, runID string) OrderRun {
	return &testOrderRun{env: c.env, workflows: c.workflows}
}

// CancelWorkflow requests cancellation of an existing workflow execution
func (c *TestWorkerClient) CancelWorkflow(ctx context.Context, workflowID string, runID string) error {
	c.env.CancelWorkflow()
	return nil
}

// TerminateWorkflow terminates an existing workflow execution
func (c *TestWorkerClient) TerminateWorkflow(ctx context.Context, workflowID string, runID string, reason string, details ...interface{}) error {
	return c.CancelWorkflow(ctx, workflowID, runID)
}

// GetStatus executes a order.v1.GetStatus query
func (c *TestWorkerClient) GetStatus(ctx context.Context, workflowID string, runID string) (*GetOrderResult, error) {
	val, err := c.env.QueryWorkflow(GetStatusQueryName)
	if err != nil {
		return nil, err
	} else if !val.HasValue() {
		return nil, nil
	} else {
		var result GetOrderResult
		if err := val.Get(&result); err != nil {
			return nil, err
		}
		return &result, nil
	}
}

// CustomerAction executes a order.v1.CustomerAction signal
func (c *TestWorkerClient) CustomerAction(ctx context.Context, workflowID string, runID string, req *CustomerActionInput) error {
	c.env.SignalWorkflow(CustomerActionSignalName, req)
	return nil
}

// UpdateOrderStatus executes a(n) order.v1.UpdateOrderStatus update in the test environment
func (c *TestWorkerClient) UpdateOrderStatus(ctx context.Context, workflowID string, runID string, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) error {
	options := NewUpdateOrderStatusOptions()
	if len(opts) > 0 && opts[0].Options != nil {
		options = opts[0]
	}
	options.Options.WaitForStage = client.WorkflowUpdateStageCompleted
	handle, err := c.UpdateOrderStatusAsync(ctx, workflowID, runID, req, options)
	if err != nil {
		return err
	}
	return handle.Get(ctx)
}

// UpdateOrderStatusAsync executes a(n) order.v1.UpdateOrderStatus update in the test environment
func (c *TestWorkerClient) UpdateOrderStatusAsync(ctx context.Context, workflowID string, runID string, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) (UpdateOrderStatusHandle, error) {
	var o *UpdateOrderStatusOptions
	if len(opts) > 0 && opts[0] != nil {
		o = opts[0]
	} else {
		o = NewUpdateOrderStatusOptions()
	}
	options, err := o.Build(workflowID, runID, req)
	if err != nil {
		return nil, fmt.Errorf("error initializing UpdateWorkflowWithOptions: %w", err)
	}
	uc := testutil.NewUpdateCallbacks()
	c.env.UpdateWorkflow(UpdateOrderStatusUpdateName, workflowID, uc, req)
	return &testUpdateOrderStatusHandle{
		callbacks:  uc,
		env:        c.env,
		opts:       options,
		runID:      runID,
		workflowID: workflowID,
		req:        req,
	}, nil
}

// GetUpdateOrderStatus retrieves a handle to an existing order.v1.UpdateOrderStatus update
func (c *TestWorkerClient) GetUpdateOrderStatus(ctx context.Context, req client.GetWorkflowUpdateHandleOptions) (UpdateOrderStatusHandle, error) {
	return nil, errors.New("unimplemented")
}

var _ UpdateOrderStatusHandle = &testUpdateOrderStatusHandle{}

// testUpdateOrderStatusHandle provides an internal implementation of a(n) UpdateOrderStatusHandle
type testUpdateOrderStatusHandle struct {
	callbacks  *testutil.UpdateCallbacks
	env        *testsuite.TestWorkflowEnvironment
	opts       *client.UpdateWorkflowOptions
	req        *UpdateOrderStatusInput
	runID      string
	workflowID string
}

// Get retrieves a test order.v1.UpdateOrderStatus update result
func (h *testUpdateOrderStatusHandle) Get(ctx context.Context) error {
	if _, err := h.callbacks.Get(ctx); err != nil {
		return err
	} else {
		return nil
	}
}

// RunID implementation
func (h *testUpdateOrderStatusHandle) RunID() string {
	return h.runID
}

// UpdateID implementation
func (h *testUpdateOrderStatusHandle) UpdateID() string {
	if h.opts != nil {
		return h.opts.UpdateID
	}
	return ""
}

// WorkflowID implementation
func (h *testUpdateOrderStatusHandle) WorkflowID() string {
	return h.workflowID
}

var _ OrderRun = &testOrderRun{}

// testOrderRun provides convenience methods for interacting with a(n) order.v1.Order workflow in the test environment
type testOrderRun struct {
	client    *TestWorkerClient
	env       *testsuite.TestWorkflowEnvironment
	opts      *client.StartWorkflowOptions
	req       *CreateOrderInput
	workflows WorkerWorkflows
}

// Cancel requests cancellation of a workflow in execution, returning an error if applicable
func (r *testOrderRun) Cancel(ctx context.Context) error {
	return r.client.CancelWorkflow(ctx, r.ID(), r.RunID())
}

// Get retrieves a test order.v1.Order workflow result
func (r *testOrderRun) Get(context.Context) (*CreateOrderResult, error) {
	r.env.ExecuteWorkflow(OrderWorkflowName, r.req)
	if !r.env.IsWorkflowCompleted() {
		return nil, errors.New("workflow in progress")
	}
	if err := r.env.GetWorkflowError(); err != nil {
		return nil, err
	}
	var result CreateOrderResult
	if err := r.env.GetWorkflowResult(&result); err != nil {
		return nil, err
	}
	return &result, nil
}

// ID returns a test order.v1.Order workflow run's workflow ID
func (r *testOrderRun) ID() string {
	if r.opts != nil {
		return r.opts.ID
	}
	return ""
}

// Run noop implementation
func (r *testOrderRun) Run() client.WorkflowRun {
	return nil
}

// RunID noop implementation
func (r *testOrderRun) RunID() string {
	return ""
}

// Terminate terminates a workflow in execution, returning an error if applicable
func (r *testOrderRun) Terminate(ctx context.Context, reason string, details ...interface{}) error {
	return r.client.TerminateWorkflow(ctx, r.ID(), r.RunID(), reason, details...)
}

// GetStatus executes a order.v1.GetStatus query against a test order.v1.Order workflow
func (r *testOrderRun) GetStatus(ctx context.Context) (*GetOrderResult, error) {
	return r.client.GetStatus(ctx, r.ID(), r.RunID())
}

// CustomerAction executes a order.v1.CustomerAction signal against a test order.v1.Order workflow
func (r *testOrderRun) CustomerAction(ctx context.Context, req *CustomerActionInput) error {
	return r.client.CustomerAction(ctx, r.ID(), r.RunID(), req)
}

// ShipmentStatusUpdated executes a shipment.v1.ShipmentStatusUpdated signal against a test order.v1.Order workflow
func (r *testOrderRun) ShipmentStatusUpdated(ctx context.Context, req *v1.UpdateShipmentStatusInput) error {
	r.env.SignalWorkflow(v1.ShipmentStatusUpdatedSignalName, req)
	return nil
}

// UpdateOrderStatus executes a(n) order.v1.UpdateOrderStatus update against a test order.v1.Order workflow
func (r *testOrderRun) UpdateOrderStatus(ctx context.Context, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) error {
	return r.client.UpdateOrderStatus(ctx, r.ID(), r.RunID(), req, opts...)
}

// UpdateOrderStatusAsync executes a(n) order.v1.UpdateOrderStatus update against a test order.v1.Order workflow
func (r *testOrderRun) UpdateOrderStatusAsync(ctx context.Context, req *UpdateOrderStatusInput, opts ...*UpdateOrderStatusOptions) (UpdateOrderStatusHandle, error) {
	return r.client.UpdateOrderStatusAsync(ctx, r.ID(), r.RunID(), req, opts...)
}

// WorkerCliOptions describes runtime configuration for oms.order.v1.Worker cli
type WorkerCliOptions struct {
	after            func(*v2.Context) error
	before           func(*v2.Context) error
	clientForCommand func(*v2.Context) (client.Client, error)
	worker           func(*v2.Context, client.Client) (worker.Worker, error)
}

// NewWorkerCliOptions initializes a new WorkerCliOptions value
func NewWorkerCliOptions() *WorkerCliOptions {
	return &WorkerCliOptions{}
}

// WithAfter injects a custom After hook to be run after any command invocation
func (opts *WorkerCliOptions) WithAfter(fn func(*v2.Context) error) *WorkerCliOptions {
	opts.after = fn
	return opts
}

// WithBefore injects a custom Before hook to be run prior to any command invocation
func (opts *WorkerCliOptions) WithBefore(fn func(*v2.Context) error) *WorkerCliOptions {
	opts.before = fn
	return opts
}

// WithClient provides a Temporal client factory for use by commands
func (opts *WorkerCliOptions) WithClient(fn func(*v2.Context) (client.Client, error)) *WorkerCliOptions {
	opts.clientForCommand = fn
	return opts
}

// WithWorker provides an method for initializing a worker
func (opts *WorkerCliOptions) WithWorker(fn func(*v2.Context, client.Client) (worker.Worker, error)) *WorkerCliOptions {
	opts.worker = fn
	return opts
}

// NewWorkerCli initializes a cli for a(n) oms.order.v1.Worker service
func NewWorkerCli(options ...*WorkerCliOptions) (*v2.App, error) {
	commands, err := newWorkerCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.App{
		Name:     "worker",
		Commands: commands,
	}, nil
}

// NewWorkerCliCommand initializes a cli command for a oms.order.v1.Worker service with subcommands for each query, signal, update, and workflow
func NewWorkerCliCommand(options ...*WorkerCliOptions) (*v2.Command, error) {
	subcommands, err := newWorkerCommands(options...)
	if err != nil {
		return nil, fmt.Errorf("error initializing subcommands: %w", err)
	}
	return &v2.Command{
		Name:        "worker",
		Subcommands: subcommands,
	}, nil
}

// newWorkerCommands initializes (sub)commands for a oms.order.v1.Worker cli or command
func newWorkerCommands(options ...*WorkerCliOptions) ([]*v2.Command, error) {
	opts := &WorkerCliOptions{}
	if len(options) > 0 {
		opts = options[0]
	}
	if opts.clientForCommand == nil {
		opts.clientForCommand = func(*v2.Context) (client.Client, error) {
			return client.Dial(client.Options{})
		}
	}
	commands := []*v2.Command{
		{
			Name:                   "get-status",
			Usage:                  "returns information about the order",
			Category:               "QUERIES",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewWorkerClient(c)
				if resp, err := client.GetStatus(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id")); err != nil {
					return fmt.Errorf("error executing %q query: %w", GetStatusQueryName, err)
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
		{
			Name:                   "customer-action",
			Usage:                  "process a customer action",
			Category:               "SIGNALS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "action",
					Usage:    "set the value of the operation's \"Action\" parameter (CUSTOMER_ACTION_UNSPECIFIED, CUSTOMER_ACTION_CANCEL, CUSTOMER_ACTION_AMEND, CUSTOMER_ACTION_TIMED_OUT)",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewWorkerClient(c)
				req, err := UnmarshalCliFlagsToCustomerActionInput(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				if err := client.CustomerAction(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id"), req); err != nil {
					return fmt.Errorf("error sending %q signal: %w", CustomerActionSignalName, err)
				}
				fmt.Println("success")
				return nil
			},
		},
		{
			Name:                   "update-order-status",
			Usage:                  "updates the order status in the database",
			Category:               "UPDATES",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow update in the background and print workflow, execution, and udpate id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:     "workflow-id",
					Usage:    "workflow id",
					Required: true,
					Aliases:  []string{"w"},
				},
				&v2.StringFlag{
					Name:    "run-id",
					Usage:   "run id",
					Aliases: []string{"r"},
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "status",
					Usage:    "set the value of the operation's \"Status\" parameter (ORDER_STATUS_UNSPECIFIED, ORDER_STATUS_PENDING, ORDER_STATUS_PROCESSING, ORDER_STATUS_CUSTOMER_ACTION_REQUIRED, ORDER_STATUS_COMPLETED, ORDER_STATUS_FAILED, ORDER_STATUS_CANCELLED, ORDER_STATUS_TIMED_OUT)",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				c, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer c.Close()
				client := NewWorkerClient(c)
				req, err := UnmarshalCliFlagsToUpdateOrderStatusInput(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				handle, err := client.UpdateOrderStatusAsync(cmd.Context, cmd.String("workflow-id"), cmd.String("run-id"), req)
				if err != nil {
					return fmt.Errorf("error executing %s update: %w", UpdateOrderStatusUpdateName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", handle.WorkflowID())
					fmt.Printf("run id: %s\n", handle.RunID())
					fmt.Printf("update id: %s\n", handle.UpdateID())
					return nil
				}
				if err := handle.Get(cmd.Context); err != nil {
					return err
				} else {
					return nil
				}
			},
		},
		{
			Name:                   "order",
			Usage:                  "manage the lifecycle of an order",
			Category:               "WORKFLOWS",
			UseShortOptionHandling: true,
			Before:                 opts.before,
			After:                  opts.after,
			Flags: []v2.Flag{
				&v2.BoolFlag{
					Name:    "detach",
					Usage:   "run workflow in the background and print workflow and execution id",
					Aliases: []string{"d"},
				},
				&v2.StringFlag{
					Name:    "task-queue",
					Usage:   "task queue name",
					Aliases: []string{"t"},
					EnvVars: []string{"TEMPORAL_TASK_QUEUE_NAME", "TEMPORAL_TASK_QUEUE", "TASK_QUEUE_NAME", "TASK_QUEUE"},
					Value:   "order-v1",
				},
				&v2.StringFlag{
					Name:    "input-file",
					Usage:   "path to json-formatted input file",
					Aliases: []string{"f"},
				},
				&v2.StringFlag{
					Name:     "id",
					Usage:    "set the value of the operation's \"Id\" parameter",
					Category: "INPUT",
				},
				&v2.StringFlag{
					Name:     "customer-id",
					Usage:    "set the value of the operation's \"CustomerId\" parameter",
					Category: "INPUT",
				},
				&v2.StringSliceFlag{
					Name:     "items",
					Usage:    "set the value of the operation's \"Items\" parameter (json-encoded: {sku: <string>, description: <string>, quantity: <int32>})",
					Category: "INPUT",
				},
			},
			Action: func(cmd *v2.Context) error {
				tc, err := opts.clientForCommand(cmd)
				if err != nil {
					return fmt.Errorf("error initializing client for command: %w", err)
				}
				defer tc.Close()
				c := NewWorkerClient(tc)
				req, err := UnmarshalCliFlagsToCreateOrderInput(cmd)
				if err != nil {
					return fmt.Errorf("error unmarshalling request: %w", err)
				}
				opts := client.StartWorkflowOptions{}
				if tq := cmd.String("task-queue"); tq != "" {
					opts.TaskQueue = tq
				}
				run, err := c.OrderAsync(cmd.Context, req, NewOrderOptions().WithStartWorkflowOptions(opts))
				if err != nil {
					return fmt.Errorf("error starting %s workflow: %w", OrderWorkflowName, err)
				}
				if cmd.Bool("detach") {
					fmt.Println("success")
					fmt.Printf("workflow id: %s\n", run.ID())
					fmt.Printf("run id: %s\n", run.RunID())
					return nil
				}
				if resp, err := run.Get(cmd.Context); err != nil {
					return err
				} else {
					b, err := protojson.Marshal(resp)
					if err != nil {
						return fmt.Errorf("error serializing response json: %w", err)
					}
					var out bytes.Buffer
					if err := json.Indent(&out, b, "", "  "); err != nil {
						return fmt.Errorf("error formatting json: %w", err)
					}
					fmt.Println(out.String())
					return nil
				}
			},
		},
	}
	if opts.worker != nil {
		commands = append(commands, []*v2.Command{
			{
				Name:                   "worker",
				Usage:                  "runs a oms.order.v1.Worker worker process",
				UseShortOptionHandling: true,
				Before:                 opts.before,
				After:                  opts.after,
				Action: func(cmd *v2.Context) error {
					c, err := opts.clientForCommand(cmd)
					if err != nil {
						return fmt.Errorf("error initializing client for command: %w", err)
					}
					defer c.Close()
					w, err := opts.worker(cmd, c)
					if opts.worker != nil {
						if err != nil {
							return fmt.Errorf("error initializing worker: %w", err)
						}
					}
					if err := w.Start(); err != nil {
						return fmt.Errorf("error starting worker: %w", err)
					}
					defer w.Stop()
					<-cmd.Context.Done()
					return nil
				},
			},
		}...)
	}
	sort.Slice(commands, func(i, j int) bool {
		return commands[i].Name < commands[j].Name
	})
	return commands, nil
}

// UnmarshalCliFlagsToCustomerActionInput unmarshals a CustomerActionInput from command line flags
func UnmarshalCliFlagsToCustomerActionInput(cmd *v2.Context) (*CustomerActionInput, error) {
	var result CustomerActionInput
	var hasValues bool
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
		hasValues = true
	}
	if cmd.IsSet("id") {
		hasValues = true
		result.Id = cmd.String("id")
	}
	if cmd.IsSet("action") {
		hasValues = true
		v, ok := v11.CustomerAction_value[cmd.String("action")]
		if !ok {
			return nil, fmt.Errorf("unsupported enum value for \"action\" flag: %q", cmd.String("action"))
		}
		result.Action = v11.CustomerAction(v)
	}
	if !hasValues {
		return nil, nil
	}
	return &result, nil
}

// UnmarshalCliFlagsToUpdateOrderStatusInput unmarshals a UpdateOrderStatusInput from command line flags
func UnmarshalCliFlagsToUpdateOrderStatusInput(cmd *v2.Context) (*UpdateOrderStatusInput, error) {
	var result UpdateOrderStatusInput
	var hasValues bool
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
		hasValues = true
	}
	if cmd.IsSet("id") {
		hasValues = true
		result.Id = cmd.String("id")
	}
	if cmd.IsSet("status") {
		hasValues = true
		v, ok := v11.OrderStatus_value[cmd.String("status")]
		if !ok {
			return nil, fmt.Errorf("unsupported enum value for \"status\" flag: %q", cmd.String("status"))
		}
		result.Status = v11.OrderStatus(v)
	}
	if !hasValues {
		return nil, nil
	}
	return &result, nil
}

// UnmarshalCliFlagsToCreateOrderInput unmarshals a CreateOrderInput from command line flags
func UnmarshalCliFlagsToCreateOrderInput(cmd *v2.Context) (*CreateOrderInput, error) {
	var result CreateOrderInput
	var hasValues bool
	if cmd.IsSet("input-file") {
		inputFile, err := gohomedir.Expand(cmd.String("input-file"))
		if err != nil {
			inputFile = cmd.String("input-file")
		}
		b, err := os.ReadFile(inputFile)
		if err != nil {
			return nil, fmt.Errorf("error reading input-file: %w", err)
		}
		if err := protojson.Unmarshal(b, &result); err != nil {
			return nil, fmt.Errorf("error parsing input-file json: %w", err)
		}
		hasValues = true
	}
	if cmd.IsSet("id") {
		hasValues = true
		result.Id = cmd.String("id")
	}
	if cmd.IsSet("customer-id") {
		hasValues = true
		result.CustomerId = cmd.String("customer-id")
	}
	if cmd.IsSet("items") {
		hasValues = true
		var tmp CreateOrderInput
		if err := protojson.Unmarshal([]byte(fmt.Sprintf("{\"items\":%s}", cmd.String("items"))), &tmp); err != nil {
			return nil, fmt.Errorf("error unmarshalling \"items\" map flag: %w", err)
		}
		result.Items = tmp.Items
	}
	if !hasValues {
		return nil, nil
	}
	return &result, nil
}

// WithWorkerSchemeTypes registers all Worker protobuf types with the given scheme
func WithWorkerSchemeTypes() scheme.Option {
	return func(s *scheme.Scheme) {
		s.RegisterType(File_oms_order_v1_orders_proto.Messages().ByName("CreateOrderInput"))
		s.RegisterType(File_oms_order_v1_orders_proto.Messages().ByName("CreateOrderResult"))
		s.RegisterType(File_oms_order_v1_orders_proto.Messages().ByName("ReserveItemsInput"))
		s.RegisterType(File_oms_order_v1_orders_proto.Messages().ByName("ReserveItemsResult"))
		s.RegisterType(File_oms_order_v1_orders_proto.Messages().ByName("UpdateOrderStatusInput"))
		s.RegisterType(File_oms_order_v1_orders_proto.Messages().ByName("GetOrderResult"))
		s.RegisterType(File_oms_order_v1_orders_proto.Messages().ByName("CustomerActionInput"))
	}
}
